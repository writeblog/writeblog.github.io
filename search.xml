<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>photo-map:一款Web站点的地图相册</title>
      <link href="/2019/06/09/photo-map/"/>
      <url>/2019/06/09/photo-map/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imgkr.cn-bj.ufileos.com/27d939c7-c90f-42cb-9ff2-2a3eef64b41d.png" alt=""></p><a id="more"></a><p><img src="https://imgkr.cn-bj.ufileos.com/0575977b-fc6e-4bdf-bb69-66f3cb224960.png" alt=""><br><img src="https://imgkr.cn-bj.ufileos.com/cf1b1463-e9a1-4923-b3f7-69e66b513a15.png" alt=""><br><a href="https://github.com/JIAOBANTANG/photo-map" target="_blank" rel="noopener">github</a><br><a href="https://photo.treelo.xin/" target="_blank" rel="noopener">运行站点</a></p><p>我想的是记录一些日子，一些足迹<br>我是一颗蒲公英，在飘着，落脚扎根。<br>在这里渲染一个点，星星满满。<br>总有一天，想去都去，该看都看。<br>我记录着，我扩散着,<br>能留下一点，在创造一点.<br>…<br>你好 陌生人<br>这一刻，不为别的，你来都来了，看都看了，你也可以去部署啊，部署后也传播给你的朋友，能贡献代码那就更感谢你了。<br>希望你生活快乐<br>◕‿-</p><p>感谢<br><a href="https://github.com/Leaflet/Leaflet" target="_blank" rel="noopener">Leaflet</a>用于基础地图交互<br><a href="https://github.com/turban/Leaflet.Photo" target="_blank" rel="noopener">Leaflet.Photo</a>用于渲染图片位置<br><a href="https://github.com/htoooth/Leaflet.ChineseTmsProviders" target="_blank" rel="noopener">Leaflet.ChineseTmsProviders</a>用于各种地图样式<br><a href="https://www.layui.com/" target="_blank" rel="noopener">layui</a>用于前端交互<br><a href="https://github.com/fengyuanchen/viewerjs/" target="_blank" rel="noopener">viewerjs</a>用于查看图片<br><a href="https://www.amap.com/" target="_blank" rel="noopener">高德地图</a>用于获取位置信息<br><a href="https://github.com/Vectorface/GoogleAuthenticator" target="_blank" rel="noopener">googleauthenticator</a>用于谷歌身份验证器验证<br><a href="https://github.com/rosell-dk/webp-convert" target="_blank" rel="noopener">webp-convert</a>用于压缩图为webp格式</p><p>建议留给留言区</p>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 地图相册 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客Material-X主题个性化</title>
      <link href="/2019/05/12/themes-custom/"/>
      <url>/2019/05/12/themes-custom/</url>
      
        <content type="html"><![CDATA[<p>Hexo博客Material-X主题个性化</p><a id="more"></a><h2 id="文章列表扭七扭八"><a href="#文章列表扭七扭八" class="headerlink" title="文章列表扭七扭八"></a>文章列表扭七扭八</h2><ol><li>在主题目录下/ayout/_partial/post.ejs里添加class=’banner’<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;article <span class="class"><span class="keyword">class</span></span>=<span class="string">"post reveal banner&lt;%= (post.title) ? "</span><span class="string">" : "</span>no-title<span class="string">" %&gt;"</span>&gt;</span><br></pre></td></tr></table></figure></li><li>在主题目录/layout/_partial/footer.ejs里引入js文件<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"/cool/banner.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="添加抖动元素-块级"><a href="#添加抖动元素-块级" class="headerlink" title="添加抖动元素(块级)"></a>添加抖动元素(块级)</h2></li><li>将以下代码添加至主题目录/source/less/_base.less文件下<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.shake</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">0.3s</span> ease;</span><br><span class="line">&#125;</span><br><span class="line">@-<span class="keyword">webkit</span>-<span class="keyword">keyframes</span> spaceboots &#123;</span><br><span class="line">  0% &#123; <span class="attribute">-webkit-transform</span>: <span class="built_in">translate</span>(2px, 1px) <span class="built_in">rotate</span>(0deg); &#125;</span><br><span class="line">  10% &#123; <span class="attribute">-webkit-transform</span>: <span class="built_in">translate</span>(-1px, -2px) <span class="built_in">rotate</span>(-1deg); &#125;</span><br><span class="line">  20% &#123; <span class="attribute">-webkit-transform</span>: <span class="built_in">translate</span>(-3px, 0px) <span class="built_in">rotate</span>(1deg); &#125;</span><br><span class="line">  30% &#123; <span class="attribute">-webkit-transform</span>: <span class="built_in">translate</span>(0px, 2px) <span class="built_in">rotate</span>(0deg); &#125;</span><br><span class="line">  40% &#123; <span class="attribute">-webkit-transform</span>: <span class="built_in">translate</span>(1px, -1px) <span class="built_in">rotate</span>(1deg); &#125;</span><br><span class="line">  50% &#123; <span class="attribute">-webkit-transform</span>: <span class="built_in">translate</span>(-1px, 2px) <span class="built_in">rotate</span>(-1deg); &#125;</span><br><span class="line">  60% &#123; <span class="attribute">-webkit-transform</span>: <span class="built_in">translate</span>(-3px, 1px) <span class="built_in">rotate</span>(0deg); &#125;</span><br><span class="line">  70% &#123; <span class="attribute">-webkit-transform</span>: <span class="built_in">translate</span>(2px, 1px) <span class="built_in">rotate</span>(-1deg); &#125;</span><br><span class="line">  80% &#123; <span class="attribute">-webkit-transform</span>: <span class="built_in">translate</span>(-1px, -1px) <span class="built_in">rotate</span>(1deg); &#125;</span><br><span class="line">  90% &#123; <span class="attribute">-webkit-transform</span>: <span class="built_in">translate</span>(2px, 2px) <span class="built_in">rotate</span>(0deg); &#125;</span><br><span class="line">  100% &#123; <span class="attribute">-webkit-transform</span>: <span class="built_in">translate</span>(1px, -2px) <span class="built_in">rotate</span>(-1deg); &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.shake</span><span class="selector-pseudo">:hover</span>,</span><br><span class="line"><span class="selector-class">.shake</span><span class="selector-pseudo">:focus</span> &#123;</span><br><span class="line">  <span class="attribute">-webkit-animation-name</span>: spaceboots;</span><br><span class="line">  <span class="attribute">-webkit-animation-duration</span>: <span class="number">0.8s</span>;</span><br><span class="line">  <span class="attribute">-webkit-transform-origin</span>:<span class="number">50%</span> <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">-webkit-animation-iteration-count</span>: infinite;</span><br><span class="line">  <span class="attribute">-webkit-animation-timing-function</span>: linear;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>使用方法<br>在标签元素class类中添加shake<h2 id="添加血小板"><a href="#添加血小板" class="headerlink" title="添加血小板"></a>添加血小板</h2></li><li>live2d资源目录添加至主图目录/source下</li><li>在主题目录/layout/_partial/head.ejs文件中引入live2dcss文件<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 血小板--&gt;</span><br><span class="line">&lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"/live2d/css/live2d.css"</span> /&gt;</span><br></pre></td></tr></table></figure></li><li>在主题目录/layout/_partial/footer.ejs文件中添加以下代码<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 血小板 --&gt;</span><br><span class="line">&lt;div id=<span class="string">"landlord"</span>&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"message"</span> style=<span class="string">"opacity:0"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  &lt;canvas id=<span class="string">"live2d"</span> width=<span class="string">"560"</span> height=<span class="string">"500"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"live2d"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span></span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"hide-button"</span>&gt;隐藏&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line">&lt;!-- 血小板--&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">  <span class="keyword">var</span> message_Path = <span class="string">'/live2d/'</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;script type="text/</span>javascript<span class="string">" src="</span>/live2d/js/live2d.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;script type="</span>text/javascript<span class="string">" src="</span>/live2d/js/message.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;script type="</span>text/javascript<span class="string">"&gt;</span></span><br><span class="line"><span class="string">  loadlive2d("</span>live2d<span class="string">", "</span>/live2d/model/xiaoban/model.json<span class="string">");</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure></li><li>为了移动端更好的阅读效果，请将以下代码添加至主题目录/source/less/_footer.less文件下<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">media</span> (max-width: @on_phone) &#123;</span><br><span class="line">  <span class="selector-id">#footer</span>&#123;</span><br><span class="line">      <span class="attribute">background-color</span>:transparent;</span><br><span class="line">      <span class="attribute">padding-bottom</span>: <span class="number">180px</span> ;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-id">#landlord</span>&#123;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">170px</span>;</span><br><span class="line">      .message&#123;</span><br><span class="line">        <span class="selector-tag">width</span>: 200<span class="selector-tag">px</span>;</span><br><span class="line">        <span class="selector-tag">left</span>: 80<span class="selector-tag">px</span>;</span><br><span class="line">        <span class="selector-tag">top</span>: 15<span class="selector-tag">px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-id">#live2d</span>&#123;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">170px</span>;</span><br><span class="line">      <span class="attribute">bottom</span>: -<span class="number">80px</span>;</span><br><span class="line">      <span class="attribute">left</span>: <span class="number">43px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="添加页面点击小心心特效-文本输入特效、运行时间"><a href="#添加页面点击小心心特效-文本输入特效、运行时间" class="headerlink" title="添加页面点击小心心特效,文本输入特效、运行时间"></a>添加页面点击小心心特效,文本输入特效、运行时间</h2><ol><li>将’https:/jiaobantang.github.io/cool/clicklove.js’另存在主题目录/source/下</li><li>将’https:/jiaobantang.github.io/cool/cooltext.js’另存在主题目录/source/下</li><li>将’https:/jiaobantang.github.io/cool/sitetime.js’另存在主题目录/source/下</li><li>修改sitetime.js参数</li><li>在主题目录/layout/_partial/footer.ejs文件中引入<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 点击特效，输入特效 运行时间 --&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"/cool/cooltext.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"/cool/clicklove.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"/cool/sitetime.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li><li>在主题目录/layout/_partial/footer.ejs文件中上方添加<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"sitetime"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cool </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHPer-浅层次的代码优化</title>
      <link href="/2019/04/02/php-coding3/"/>
      <url>/2019/04/02/php-coding3/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h2 id="说在前面"><a href="#说在前面" class="headerlink" title="说在前面"></a>说在前面</h2><p>代码优化是一个持续不断的过程，养成一个好的编码习惯，善用一些PHP的语法糖，让我们的代码看起来更好维护更不容易出错，这本身就是一种优化。还有一种就是对代码的可读性再做一次优化，让代码更好维护。</p><h2 id="if的使用技巧"><a href="#if的使用技巧" class="headerlink" title="if的使用技巧"></a>if的使用技巧</h2><h3 id="if的使用技巧之-“给定初始值”"><a href="#if的使用技巧之-“给定初始值”" class="headerlink" title="if的使用技巧之 “给定初始值”"></a>if的使用技巧之 “给定初始值”</h3><p>来看一段代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="number">1</span> == $orderState)&#123;</span><br><span class="line">    $orderTitle = <span class="string">"已预定"</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    $orderTitle = <span class="string">"已售出"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> $orderTitle;</span><br></pre></td></tr></table></figure><p>给定初始值之后，我们可以写成这样，少了一层else</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$orderTitle = <span class="string">'已售出'</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="number">1</span> == $orderState)&#123;</span><br><span class="line">    $orderTitle = <span class="string">'已预定'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> $orderTitle;</span><br></pre></td></tr></table></figure><h3 id="if的使用技巧之-“用-amp-amp-替换-if”"><a href="#if的使用技巧之-“用-amp-amp-替换-if”" class="headerlink" title="if的使用技巧之 “用 &amp;&amp; 替换 if”"></a>if的使用技巧之 “用 &amp;&amp; 替换 if”</h3> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">if</span>(!<span class="keyword">isset</span>($newpwd[<span class="number">6</span>]))&#123;</span><br><span class="line">    $message = <span class="string">'密码长度不足'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 可以替换成<br> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!<span class="keyword">isset</span>($newpwd[<span class="number">6</span>]) &amp;&amp; $message = <span class="string">'密码长度不足'</span>;</span><br></pre></td></tr></table></figure></p><h3 id="if的使用技巧之“三元运算符替换if”"><a href="#if的使用技巧之“三元运算符替换if”" class="headerlink" title="if的使用技巧之“三元运算符替换if”"></a>if的使用技巧之“三元运算符替换if”</h3> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">empty</span>($_post[<span class="string">'action'</span>]))&#123;</span><br><span class="line">    $action = <span class="string">'default'</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    $action = $_POST[<span class="string">'action'</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以替换成</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$action = (<span class="keyword">empty</span>($_post[<span class="string">'action'</span>]))? <span class="string">'default'</span> : $_post[<span class="string">'action'</span>];</span><br></pre></td></tr></table></figure><p>也可以把三元运算符简写成</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$action = $_post[<span class="string">'action'</span>]?:<span class="string">'default'</span>;</span><br></pre></td></tr></table></figure><h3 id="if的使用技巧之-“去掉多此一举的if”"><a href="#if的使用技巧之-“去掉多此一举的if”" class="headerlink" title="if的使用技巧之 “去掉多此一举的if”"></a>if的使用技巧之 “去掉多此一举的if”</h3><p>这个函数是判断一个年份是否是闰年，如果是返回ture否则返回false</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isLeapYear</span><span class="params">($year)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(($year % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; $year % <span class="number">100</span> != <span class="number">0</span>) || ($year % <span class="number">400</span> == <span class="number">0</span>))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类似于这种判断一个条件是否为真，为真返回ture为假返回false的时候，我们可以直接返回这个条件就可以了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isLeapYear</span><span class="params">($year)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ($year % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; $year % <span class="number">100</span> != <span class="number">0</span>) || ($year % <span class="number">400</span> == <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="改进“else-if”"><a href="#改进“else-if”" class="headerlink" title="改进“else if”"></a>改进“else if”</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="string">'你'</span>==$sortname)&#123;</span><br><span class="line">    $sortid = <span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">'还'</span>==$sortname)&#123;</span><br><span class="line">    $sortid = <span class="number">2</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">'好'</span>==$sortname)&#123;</span><br><span class="line">    $sortid = <span class="number">3</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">'吗'</span>==$sortname)&#123;</span><br><span class="line">    $sortid = <span class="number">4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以用switch来改造多层的判断</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>($sortname)&#123;</span><br><span class="line">    <span class="keyword">case</span><span class="string">'你'</span>:</span><br><span class="line">        $sortid = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span><span class="string">'还'</span>:</span><br><span class="line">        $sortid = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span><span class="string">'好'</span>:</span><br><span class="line">        $sortid = <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span><span class="string">'吗'</span>:</span><br><span class="line">        $sortid = <span class="number">4</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="表驱动法替代“else-if”"><a href="#表驱动法替代“else-if”" class="headerlink" title="表驱动法替代“else if”"></a>表驱动法替代“else if”</h3><p>上面那个例子用switch似乎让代码变多了，但看起来更简洁了，如果你还不爽，那下面。。。<br>在PHP里面数组可以理解为一个hash表</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$sortTable = [</span><br><span class="line">    <span class="string">'你'</span>=&gt;<span class="number">1</span>,</span><br><span class="line">    <span class="string">'还'</span>=&gt;<span class="number">2</span>,</span><br><span class="line">    <span class="string">'好'</span>=&gt;<span class="number">3</span>,</span><br><span class="line">    <span class="string">'吗'</span>=&gt;<span class="number">4</span></span><br><span class="line">];</span><br><span class="line">$sortid = $sorTable[$sortname];</span><br></pre></td></tr></table></figure><h2 id="循环语句的几个要点"><a href="#循环语句的几个要点" class="headerlink" title="循环语句的几个要点"></a>循环语句的几个要点</h2><blockquote><p>要写无限循环时，用while(true)表示无限循环，别用for。<br>特定情况下(发邮件、采集网页)要加延时(sleep)<br>循环体内尽可能不用函数或更消耗资源的调用<br>foreach代替while和for循环(PHP)<br>避免空循环<br>只做一件事，尽可能短，控制在50行以内<br>循环嵌套限制在3曾以内</p></blockquote><h3 id="使用更精悍短小的代码"><a href="#使用更精悍短小的代码" class="headerlink" title="使用更精悍短小的代码"></a>使用更精悍短小的代码</h3><blockquote><p>函数的最佳最大长度时50-150行代码<br>函数参不超过7个<br>短小函数更容易理解也方便修改<br>只做一件事情的函数更易于复用<br>短小的函数测试更方便</p></blockquote><h2 id="中间结果赋值给变量"><a href="#中间结果赋值给变量" class="headerlink" title="中间结果赋值给变量"></a>中间结果赋值给变量</h2><p>$str = ‘this_is_a_test’;<br>$humpstr = implode(‘’,array_map(‘ucfirst’,explode(‘_’,$str)));<br>你觉得这样写好不好呢？我以为这样很cool，一行就搞定，实际上这样写并不好，乍一看不好理解，另外还不好调试。那怎么改造这种代码呢？把中间结果赋值给变量</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$str = <span class="string">'this_is_a_test'</span>;</span><br><span class="line">$words = explode(<span class="string">'_'</span>,$str);</span><br><span class="line">$uWords = array_map(<span class="string">'ucfirst'</span>,$words);</span><br><span class="line">$humpstr = implode(<span class="string">''</span>,$uWords);</span><br></pre></td></tr></table></figure><h2 id="复杂的逻辑表达式做成布尔函数"><a href="#复杂的逻辑表达式做成布尔函数" class="headerlink" title="复杂的逻辑表达式做成布尔函数"></a>复杂的逻辑表达式做成布尔函数</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!$hasone &amp;&amp; <span class="number">1</span>==$ddisfirst &amp;&amp; <span class="string">''</span>==$litpic &amp;&amp;<span class="keyword">empty</span>($litpicname))&#123;</span><br><span class="line">    $litpicname = GetImageMapDD($iurl,$cfg_ddimg_width);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你像这样四个条件并在一起满足的条件下才会执行下面的代码，是不是会很难理解，所以复杂的逻辑表达式做成布尔函数，就是把它给切开</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$emptyPic = ( <span class="string">''</span>==$litpic &amp;&amp;<span class="keyword">empty</span>($litpicname);</span><br><span class="line">$validFirstPic = (!$hasone &amp;&amp; <span class="number">1</span>==$ddisfirst &amp;&amp; <span class="string">''</span>);</span><br><span class="line"><span class="keyword">if</span>($emptyPic &amp;&amp; $validFirstPic)&#123;</span><br><span class="line">    $litpicname = GetImageMapDD($iurl,$cfg_ddimg_width);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="永远不要复制粘贴雷同的代码"><a href="#永远不要复制粘贴雷同的代码" class="headerlink" title="永远不要复制粘贴雷同的代码"></a>永远不要复制粘贴雷同的代码</h2><blockquote><p>相同的代码放在一起让以后修改更轻松<br>可以让全局的统计和过滤器等实现方便<br>可复用的带参函数是解决雷同代码的好方法</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Coding </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHPer-语法糖</title>
      <link href="/2019/04/02/php-coding2/"/>
      <url>/2019/04/02/php-coding2/</url>
      
        <content type="html"><![CDATA[<p><img src="http://cdn.treelo.xin/006Fzy5igy1g1oijs4k7nj30jy095tce.jpg" alt=""></p><a id="more"></a><p>PHP语法糖就是PHP一些小的语法技巧<br>计算机语言中添加的某种语法，这种语法对语言的功能并没有影响，但是方便程序员使用</p><h3 id="1、echo-的逗号和点号"><a href="#1、echo-的逗号和点号" class="headerlink" title="1、echo 的逗号和点号"></a>1、echo 的逗号和点号</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$foo = <span class="string">'hello'</span>;</span><br><span class="line">$bar = <span class="string">'world'</span>;</span><br><span class="line"><span class="keyword">echo</span> $foo.$bar;</span><br><span class="line"><span class="keyword">echo</span> $foo,$bar;</span><br></pre></td></tr></table></figure><h3 id="2、逗号优于点号"><a href="#2、逗号优于点号" class="headerlink" title="2、逗号优于点号"></a>2、逗号优于点号</h3><p>echo是PHP的语言结构，用逗号是依次输出变量，点号连接操作会占用内存…</p><h3 id="3、用-i-1代替-i-i-1、-i-、-i"><a href="#3、用-i-1代替-i-i-1、-i-、-i" class="headerlink" title="3、用$i+=1代替$i=$i+1、$i++、++$i"></a>3、用$i+=1代替$i=$i+1、$i++、++$i</h3><p>额…你就知道效率高就行了</p><h3 id="4、用isset代替strlen"><a href="#4、用isset代替strlen" class="headerlink" title="4、用isset代替strlen"></a>4、用isset代替strlen</h3><p>PHP语言里有一些东西看起来像函数，实际上是语言结构，语言结构要比普通函数的优先级高，也会更快，PHP常见的语言结构有：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span>()</span><br><span class="line"><span class="keyword">print</span>()</span><br><span class="line"><span class="keyword">die</span>()</span><br><span class="line"><span class="keyword">isset</span>()</span><br><span class="line"><span class="keyword">unset</span>()</span><br><span class="line"><span class="keyword">include</span>(),<span class="keyword">include_once</span>()</span><br><span class="line"><span class="keyword">require</span>(),<span class="keyword">require_once</span>()</span><br><span class="line"><span class="keyword">array</span>()</span><br><span class="line"><span class="keyword">list</span>()</span><br><span class="line"><span class="keyword">empty</span>()</span><br><span class="line">evel()</span><br></pre></td></tr></table></figure><p>所以说能用到这些语言结构时，就尽量不要用函数<br>如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$subject = <span class="string">'jiaobantang'</span>;</span><br><span class="line"><span class="keyword">if</span>(strlen($subject)&lt;=<span class="number">8</span>) <span class="keyword">echo</span> <span class="string">'哈哈'</span>;</span><br><span class="line"><span class="comment">//换成</span></span><br><span class="line"><span class="keyword">if</span>(！<span class="keyword">isset</span>($subject)[<span class="number">8</span>] <span class="keyword">echo</span> <span class="string">'哈哈'</span>;</span><br></pre></td></tr></table></figure><h3 id="5、用strtr代替str-replace"><a href="#5、用strtr代替str-replace" class="headerlink" title="5、用strtr代替str_replace"></a>5、用strtr代替str_replace</h3><p><img src="http://cdn.treelo.xin/006Fzy5igy1g1oimndi67j30xh04bmzc.jpg" alt=""></p><h3 id="6、PHP用yield实现协程"><a href="#6、PHP用yield实现协程" class="headerlink" title="6、PHP用yield实现协程"></a>6、PHP用yield实现协程</h3><p>yield会保存当前程序运行的状态<br>我们写一个函数xrange()函数提供和PHP的内置函数range()一样的功能<br>*/<br>//循环输出一个0到10000的数组,这个大数组实在内存中被真实构建的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span>(range(<span class="number">0</span>,<span class="number">10000</span>) <span class="keyword">as</span> $number)&#123;</span><br><span class="line">    <span class="keyword">echo</span> $number;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//但如果我想节省内存，每次在这个基础上加1就行了，这个时候我们就可以用协程来实现</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">xrange</span><span class="params">($start,$end,$step = <span class="number">1</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>($i = $start;$i &lt;= $end; $i += $step)&#123;</span><br><span class="line">        <span class="keyword">yield</span> $i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">foreach</span> (xrange(<span class="number">1</span>,<span class="number">10000</span>) <span class="keyword">as</span> $num)&#123;</span><br><span class="line">    <span class="keyword">echo</span> $num,<span class="string">"\n"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7、用“-”定义数组"><a href="#7、用“-”定义数组" class="headerlink" title="7、用“[]”定义数组"></a>7、用“[]”定义数组</h3><h3 id="8、用-进行幂运算"><a href="#8、用-进行幂运算" class="headerlink" title="8、用**进行幂运算"></a>8、用**进行幂运算</h3><h3 id="9、用“…”定义变长参数数组"><a href="#9、用“…”定义变长参数数组" class="headerlink" title="9、用“…”定义变长参数数组"></a>9、用“…”定义变长参数数组</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#变长参数 不依赖 func_get_args()</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addAll</span><span class="params">(...$nums)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> array_sum($nums);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> addAll(<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>)</span><br></pre></td></tr></table></figure><h3 id="10、函数赋值默认参数：-运算符"><a href="#10、函数赋值默认参数：-运算符" class="headerlink" title="10、函数赋值默认参数：+运算符"></a>10、函数赋值默认参数：+运算符</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 本用法特别适用于给函数赋值默认参数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getDivHtml</span><span class="params">($params)</span></span>&#123;</span><br><span class="line">    $params += [</span><br><span class="line">         <span class="string">'height'</span>=&gt;<span class="string">'200px'</span></span><br><span class="line">    ]</span><br><span class="line">    print_r($params);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>11、??运算符</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#三元运算符</span></span><br><span class="line">$userName = <span class="keyword">isset</span>($_GET[<span class="string">'username'</span>]) ? $_GET[<span class="string">'username'</span>] : <span class="string">'nobody'</span>;</span><br><span class="line"><span class="comment">#这种情况下可以简写成</span></span><br><span class="line">$userName =$_GET[<span class="string">'username'</span>] ?? <span class="string">'nobody'</span>;</span><br><span class="line"><span class="number">12</span>、比较运算符</span><br><span class="line">$num1 = $num2&lt;=&gt;$num3;</span><br><span class="line"><span class="comment">#如果$num2&gt;$num3,$num1 = 1</span></span><br><span class="line"><span class="comment">#如果$num2==$num3,$num1 = 0</span></span><br><span class="line"><span class="comment">#如果$num2&lt;$num3,$num1 = -1</span></span><br></pre></td></tr></table></figure><p>13、神奇的eval<br>eval() 可以动态的执行任何PHP代码<br>…</p>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Coding </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHPer-我所认可的PSR规范</title>
      <link href="/2019/04/02/php-coding/"/>
      <url>/2019/04/02/php-coding/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h2 id="PSR-1-基础编码规范"><a href="#PSR-1-基础编码规范" class="headerlink" title="PSR-1 基础编码规范"></a>PSR-1 基础编码规范</h2><h3 id="概括"><a href="#概括" class="headerlink" title="概括"></a>概括</h3><ul><li>PHP 代码文件<strong>必须</strong> 以 <code>&lt;?php</code> 长标签 或 <code>&lt;?=</code> 短输出标签；</li><li>PHP 代码文件 <strong>必须</strong> 以 不带 <code>BOM 的 UTF-8</code> 编码；</li><li>命名空间以及类 <strong>必须</strong> 符合 PSR 的自动加载规范<br>  这意味着每个类都独立为一个文件，并且至少在一个层次的命名空间内<br>  类的命名 <strong>必须</strong> 遵循<code>StudlyCaps</code> 大写开头的驼峰命名规范；</li><li>类中的常量所有字母都 <strong>必须</strong> 大写，单词间用下划线分隔；<br>类的属性命名 可以 遵循：<ol><li>大写开头的驼峰式 ($StudlyCaps)</li><li>小写开头的驼峰式 ($camelCase)</li><li>下划线分隔式 ($under_score)</li></ol></li><li>方法名称 <strong>必须</strong> 符合 camelCase 式的小写开头驼峰命名规范。<h3 id="PSR-2-编码风格规范"><a href="#PSR-2-编码风格规范" class="headerlink" title="PSR-2 编码风格规范"></a>PSR-2 编码风格规范</h3></li><li>每行的字符数 <strong>应该</strong> 软性保持在 80~120 之间</li><li>每个<code>namespace</code>命名空间声明语句和<code>use</code>声明语句块后面，<strong>必须</strong>插入一个空白行。</li><li>类的开始花括号（{） 必须 写在类声明后自成一行，结束花括号（}）也 必须 写在类主体后自成一行。</li><li>方法的开始花括号（{） 必须 写在函数声明后自成一行，结束花括号（}）也 必须 写在函数主体后自成一行。</li><li>类的属性和方法 必须 添加访问修饰符（<code>private</code>、<code>protected</code> 以及 <code>public</code>），<code>abstract</code> 以及 <code>final</code> 必须 声明在访问修饰符之前，而 <code>static</code> 必须 声明在访问修饰符之后。</li><li>控制结构的关键字后 必须 要有一个空格符，而调用方法或函数时则不要有空格。</li><li>控制结构的开始花括号（{） 必须 写在声明的同一行，而结束花括号（}） 必须 写在主体后自成一行。</li><li>控制结构的开始左括号后和结束右括号前，都 一定不可 有空格符。</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Vendor</span>\<span class="title">Package</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">FooInterface</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">BarClass</span> <span class="title">as</span> <span class="title">Bar</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">OtherVendor</span>\<span class="title">OtherPackage</span>\<span class="title">BazClass</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> <span class="keyword">extends</span> <span class="title">Bar</span> <span class="keyword">implements</span> <span class="title">FooInterface</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sampleMethod</span><span class="params">($a, $b = null)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ($a === $b) &#123;</span><br><span class="line">            bar();</span><br><span class="line">        &#125; <span class="keyword">elseif</span> ($a &gt; $b) &#123;</span><br><span class="line">            $foo-&gt;bar($arg1);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            BazClass::bar($arg2, $arg3);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// try 主体</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (FirstExceptionType $e) &#123;</span><br><span class="line">            <span class="comment">// catch 主体</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (OtherExceptionType $e) &#123;</span><br><span class="line">            <span class="comment">// catch 主体</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">bar</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 方法体</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
          <category> PSR </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Coding </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>糖糖日签</title>
      <link href="/2019/03/24/tangsign/"/>
      <url>/2019/03/24/tangsign/</url>
      
        <content type="html"><![CDATA[<p><img src="https://ww2.sinaimg.cn/large/006Fzy5igy1g1e5jzmi7xj31hc0q8taf.jpg" alt=""></p><a id="more"></a><h3 id="更新计划延迟"><a href="#更新计划延迟" class="headerlink" title="更新计划延迟"></a>更新计划延迟</h3><h3 id="添加选色卡-2019-4-22"><a href="#添加选色卡-2019-4-22" class="headerlink" title="添加选色卡(2019/4/22)"></a>添加选色卡(2019/4/22)</h3><p><img src="https://ww2.sinaimg.cn/large/006Fzy5igy1g2b9ptdysdj31gw0q0tj0.jpg" alt=""></p><h3 id="本次更新-2019-4-8"><a href="#本次更新-2019-4-8" class="headerlink" title="本次更新(2019/4/8)"></a>本次更新(2019/4/8)</h3><h4 id="字体使用CDN，更换主页风格，引入三言"><a href="#字体使用CDN，更换主页风格，引入三言" class="headerlink" title="字体使用CDN，更换主页风格，引入三言"></a>字体使用CDN，更换主页风格，引入三言</h4><h3 id="展示"><a href="#展示" class="headerlink" title="展示"></a>展示</h3><p><img src="https://ww2.sinaimg.cn/large/006Fzy5igy1g1vmnqr2e7j31hc0q045c.jpg" alt=""><br><img src="https://ww2.sinaimg.cn/large/006Fzy5igy1g1vmrobshxj31hc0q3jt2.jpg" alt=""><br><span style="color:red;">免责声明：“糖糖日签”所用到的字体，均下载自正规渠道，未获得商用授权。“糖糖日签”所用到的字体均为个人使用，未曾用于营利性的活动当中。</sapn></p><h3 id="本次更新-2019-3-1-24"><a href="#本次更新-2019-3-1-24" class="headerlink" title="本次更新(2019/3/1/24)"></a>本次更新(2019/3/1/24)</h3><h4 id="更新内容：可更换字体，新浪图床外链"><a href="#更新内容：可更换字体，新浪图床外链" class="headerlink" title="更新内容：可更换字体，新浪图床外链"></a>更新内容：可更换字体，新浪图床外链</h4><p>[项目地址]<a href="http://sign.treelo.xin/" target="_blank" rel="noopener">糖糖日签</a></p>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 糖糖日签 </tag>
            
            <tag> 日签 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript高级</title>
      <link href="/2018/12/25/javascript-advanced/"/>
      <url>/2018/12/25/javascript-advanced/</url>
      
        <content type="html"><![CDATA[<p><img src="https://ws3.sinaimg.cn/large/005BYqpgly1fyiznf3031j30jl059wep.jpg" alt=""></p><a id="more"></a><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/A_re-introduction_to_JavaScript" target="_blank" rel="noopener">官方文档</a></p><h1 id="请回答以下问题"><a href="#请回答以下问题" class="headerlink" title="请回答以下问题"></a>请回答以下问题</h1><p>Java和JavaScript什么关系？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">最初的 JavaScript 名为 LiveScript，后来因为 Sun Microsystem 的 Java 语言的兴起和广泛使用，Netscape 出于宣传和推广的考虑，将它的名字从最初的 LiveScript 更改为 JavaScript——尽管两者之间并没有什么共同点。这便是之后混淆产生的根源。</span><br></pre></td></tr></table></figure><p>ES6听说过吗？和JavaScript什么关系？ES2015听说过吗？都是什么关系？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ES6是JavaScript的第六版,因为在2015年发布,所以也称ES2015</span><br></pre></td></tr></table></figure><p>如何把变量转成数字？转成布尔？转成字符串？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">转数字</span><br><span class="line">parseInt：如果前几个字符是数字可以转成数字。</span><br><span class="line">Number：将整体转成数字。</span><br><span class="line">。。。。</span><br><span class="line">其他的我觉得没什么好转的</span><br></pre></td></tr></table></figure><p>使用 Number() 和 parseInt 转数字时的区别？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">如上...</span><br></pre></td></tr></table></figure><p>var 和 let 干什么用的？什么区别？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">都是定义变量的</span><br><span class="line">var 可以定义局部变量和全局变量</span><br><span class="line">let 可以定义快级变量（只在大括号中生效的变量）、局部变量和全局变量</span><br><span class="line">一般在函数外部多使用var 来定义变量，在函数和循环内多试用let来定义变量</span><br><span class="line">var 支持变量提升，let不支持</span><br></pre></td></tr></table></figure><p>在一个函数中，如果定义变量时没有添加 var 会出现什么情况？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">如果在函数中定义变量时没有写 var 或者 let 那么变量会变成全局变量。</span><br></pre></td></tr></table></figure><p>什么是内存泄漏？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">应该当作垃圾回收结果无法被释放，导致一直占用内存。这种行为被成为内存泄露</span><br></pre></td></tr></table></figure><p>什么是块级作用域？如何定义块级作用域的变量？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在大大括号内的，一般用let定义块级变量</span><br></pre></td></tr></table></figure><p><strong>你需要带着问题，看下面的内容</strong></p><p>什么是运算符短路？有什么用？<br>说出JS中你用过的数据类型？<br>编写一个使用 let 定义变量和使用 var 定义变量不同点的案例。<br>for .. in 和 for .. of 的区别？用途？<br>forEach 的用途？<br>请问 arguments 是干什么用的？它代表什么？<br>什么是匿名函数？应用场景？<br>this 代表什么？<br>什么是箭头函数？有什么用途？this 在箭头函数和普通函数中的区别是什么？<br>call 和 apply 的功能是什么？有什么区别？<br>如何开启严格模式？请说出至少一个严格模式与普通模式的区别？<br>什么是闭包？闭包有什么特点？有什么用？<br>什么是垃圾回收机制？<br>什么是内存泄漏？在什么情况下会出现内存泄漏？<br>什么是OOP？OOP的三大特性？什么是多态？<br>什么是原型链？对象如何访问原型对象？构造函数如何访问原型对象？<br>什么是构造函数？在JS中如何基于原型(prototype)实现面向对象？<br>ES6中的OOP中 super 是干什么用的？ES6中的继承需要注意什么？</p><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p><img src="https://ws3.sinaimg.cn/large/005BYqpgly1fyizoukl30j31f409mn48.jpg" alt=""></p><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><p><img src="https://ws3.sinaimg.cn/large/005BYqpgly1fyizp6e7uxj30l10t7dk6.jpg" alt=""></p><h1 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h1><h2 id="转数字"><a href="#转数字" class="headerlink" title="转数字"></a>转数字</h2><p>parseInt：如果前几个字符是数字可以转成数字。<br>Number：将整体转成数字。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="string">'123abc'</span>;</span><br><span class="line"><span class="built_in">console</span>.log( <span class="built_in">parseInt</span>(num) );   <span class="comment">// 123</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="built_in">Number</span>(num) );     <span class="comment">// NaN (Not a Number)</span></span><br></pre></td></tr></table></figure><h2 id="转字符串"><a href="#转字符串" class="headerlink" title="转字符串"></a>转字符串</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log( <span class="number">100</span> + <span class="number">100</span> + <span class="string">'100abc'</span>);        <span class="comment">// 200100abc</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">''</span> + <span class="number">100</span> + <span class="number">100</span> + <span class="string">'100abc'</span>);   <span class="comment">// 100100100abc</span></span><br></pre></td></tr></table></figure><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><p>定义变量：<code>var</code> 和 <code>let</code>。</p><p>定义常量：<code>const</code>。</p><h2 id="var"><a href="#var" class="headerlink" title="var"></a>var</h2><p>可以定义 <code>局部变量</code> 和 <code>全局变量</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name;   <span class="comment">// 全局变量</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">abc</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> age;   <span class="comment">// 局部变量</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>意外的全局变量。<br>如果在函数中定义变量时没有写 <code>var</code> 或者 <code>let</code> 那么变量会变成全局变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">abc</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    age = <span class="number">10</span>  <span class="comment">// 全局变量</span></span><br><span class="line">&#125;</span><br><span class="line">abc()</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( age )   <span class="comment">// 10</span></span><br></pre></td></tr></table></figure><h2 id="let"><a href="#let" class="headerlink" title="let"></a>let</h2><p>可以定义<code>块级变量</code>、 <code>局部变量</code> 和 <code>全局变量</code>。</p><p>let 可以定义块级变量（只在大括号中生效的变量）</p><p>示例1：let 和 var 的区别</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++) &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log( i )   <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++) &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log( i )   <span class="comment">// 10</span></span><br></pre></td></tr></table></figure><p>示例2：使用 var  时无论，调用数组中第几个函数，输出的结果都是10</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> funs = []</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++) &#123;</span><br><span class="line">    funs[i] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log( i )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">funs[<span class="number">3</span>]();   <span class="comment">//10</span></span><br><span class="line">funs[<span class="number">4</span>]();   <span class="comment">//10</span></span><br><span class="line">funs[<span class="number">5</span>]();   <span class="comment">//10</span></span><br></pre></td></tr></table></figure><p>使用 let  时的效果：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> funs = []</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++) &#123;</span><br><span class="line">    funs[i] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log( i )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">funs[<span class="number">3</span>]();   <span class="comment">// 3</span></span><br><span class="line">funs[<span class="number">4</span>]();   <span class="comment">// 4</span></span><br><span class="line">funs[<span class="number">5</span>]();   <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><h1 id="短路运算符"><a href="#短路运算符" class="headerlink" title="短路运算符"></a>短路运算符</h1><p>我们可以使用 <code>&amp;&amp;</code> 和 <code>||</code> 实现短路操作。</p><p>&amp;&amp; ： 连接多个语句，当语句1为真是执行语句2.</p><p>||：连接多个语句，当语句1为假时执行语句2.</p><p>可以用短路运算符来实现一些简写，比如，有时我们获取到一个变量，不知道它的值是什么，但我们希望无论如何它都是一个数字，至少是个0，我们就可以写：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果 a 是假就得到0</span></span><br><span class="line"><span class="keyword">var</span> a = a || <span class="number">0</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果 o 存在就调用 o.name</span></span><br><span class="line">o &amp;&amp; o.name()</span><br></pre></td></tr></table></figure><h1 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h1><p><img src="https://ws3.sinaimg.cn/large/005BYqpgly1fyizq5r57qj30sa0e8gp3.jpg" alt=""></p><p>除了 while、do…while、for 之外，我们还可以使用：</p><ol><li><p>在循环数组时，我们可以使用 <code>for...of</code> 、<code>for...in</code>、<code>forEach</code>。</p></li><li><p>循环对象时，我们可以使用 <code>for...in</code>。</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 循环得到值</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">of</span> arr) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i)   <span class="comment">// abcde</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 循环得到下标</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">in</span> arr) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i)   <span class="comment">// 01234</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 循环得到下标和值</span></span><br><span class="line">arr.forEach(<span class="function">(<span class="params">v,k</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(k,v)     <span class="comment">// 0a1b2c3d4e</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="arguments"><a href="#arguments" class="headerlink" title="arguments"></a>arguments</h2><p>在函数中可以使用 <code>arguments</code> 获取函数在调用时的参数数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">abc</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="built_in">arguments</span>.length )   <span class="comment">// 2 , 获取参数的数量</span></span><br><span class="line">    <span class="built_in">console</span>.log( <span class="built_in">arguments</span>[<span class="number">0</span>] )      <span class="comment">// tom ,第一个参数值</span></span><br><span class="line">    <span class="built_in">console</span>.log( <span class="built_in">arguments</span>[<span class="number">1</span>] )      <span class="comment">// jack ,第二个参数值</span></span><br><span class="line">&#125;</span><br><span class="line">abc(<span class="string">'tom'</span>,<span class="string">'jack'</span>)</span><br></pre></td></tr></table></figure><h2 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h2><p>匿名函数可以用来隔绝一段作用域。</p><p>有时我们需要在一个现有的项目中添加新的代码，这时当我们添加变量、函数时就有可能出现和原来系统中变量名、函数名冲突的情况，为了避免我们的代码和原代码中出现命名冲突的情况，我们就可以把我们的代码放到一个匿名函数中，然后调用这个匿名函数，这样我们所写的代码都只在这个匿名函数内生效，就不会影响其它代码了。</p><p>有两种写法，来调用匿名函数得到一段独立的作用域：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 这里的代码不影响外面的作用域</span></span><br><span class="line">    </span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line">!<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里的代码不影响外面的作用域</span></span><br><span class="line">    </span><br><span class="line">&#125;()</span><br></pre></td></tr></table></figure><h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><p>箭头函数是匿名函数的一种简写方式。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 普通函数</span></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">'hello'</span> )</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 箭头函数</span></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">'hello'</span> )</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure><p><img src="https://ws3.sinaimg.cn/large/005BYqpgly1fyizqs40mdj30gm03y0tz.jpg" alt=""></p><p>比如以下代码运行的结果是不同的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">abc</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.age = <span class="number">10</span></span><br><span class="line">    </span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log( <span class="keyword">this</span>.age )        <span class="comment">// 20</span></span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">    </span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log( <span class="keyword">this</span>.age )        <span class="comment">// 10</span></span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">abc()</span><br></pre></td></tr></table></figure><h2 id="call-apply"><a href="#call-apply" class="headerlink" title="call/apply"></a>call/apply</h2><p>call 和 apply 的功能相同：<code>使一个函数归属于一个对象来调用</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">abc</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="keyword">this</span>.age )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">    age:<span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line">abc();          <span class="comment">// 独立调用时 this.age 不存在</span></span><br><span class="line">abc.call(o);    <span class="comment">// 10 ， abc 函数归属于 o 这个对象来调用，这时 this.age 指的就是 o 对象中的 age。</span></span><br></pre></td></tr></table></figure><p>call 和 apply 的区别是参数形式不同：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">abc</span>(<span class="params">a,b</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="keyword">this</span>.age )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">    age:<span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line">abc.call(o, <span class="number">10</span>, <span class="number">20</span>);     <span class="comment">// 10 ， 20 对应 a, b 两个参数</span></span><br><span class="line">abc.apply(o, [<span class="number">10</span>,<span class="number">20</span>]);   <span class="comment">// [10,20] 数组中的对应 a,b 两个参数</span></span><br></pre></td></tr></table></figure><h1 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h1><p><img src="https://ws3.sinaimg.cn/large/005BYqpgly1fyizr5rpxij31gq0e2afh.jpg" alt=""><br>以下代码在严格模式下会报错：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>      <span class="comment">// 严格模式</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">abc</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    age = <span class="string">'tom'</span>        <span class="comment">// 报错</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">abc();</span><br></pre></td></tr></table></figure><h1 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h1><p><img src="https://ws3.sinaimg.cn/large/005BYqpgly1fyizrkj05sj311m0a0433.jpg" alt=""></p><p>以下代码就是一个闭包，它制作了一个 id 变量，这个变量不会马上销毁，会一直存在，并且不能被外部随意修改，只能通过闭包内修改。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义闭包</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getId</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> id = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取一个自增的ID</span></span><br><span class="line"><span class="keyword">var</span> id = getId()</span><br><span class="line"><span class="built_in">console</span>.log(  id()  )  <span class="comment">//0</span></span><br><span class="line"><span class="built_in">console</span>.log(  id()  )  <span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(  id()  )  <span class="comment">//2</span></span><br></pre></td></tr></table></figure><h1 id="内存泄漏"><a href="#内存泄漏" class="headerlink" title="内存泄漏"></a>内存泄漏</h1><p><img src="https://ws3.sinaimg.cn/large/005BYqpgly1fyizry0xapj31un0a5ahk.jpg" alt=""></p><h2 id="循环引用"><a href="#循环引用" class="headerlink" title="循环引用"></a>循环引用</h2><p>当 DOM 对象和 JS 对象互相引用时，会导致两个对象在该销毁时都无法销毁。</p><p>比如下面的 el 和 o 这两个对象都是局部变量，在函数执行之后就应该销毁，但因为两个对象互相引用，所以导致函数执行之后也无法销毁：<br><img src="https://ws3.sinaimg.cn/large/005BYqpgly1fyizse4ovwj316g0kgk2w.jpg" alt=""></p><h1 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h1><p>原型链：所有的对象都会继承自一个原型对象，这个原型对象又会继承自一个原型对象，一层一层直到最顶层继承自 null，这样的链就是原型链。</p><p>构造函数：生成对象的函数。</p><p>访问原型对象</p><p>对象中通过 <code>__proto__</code> 访问原型对象。</p><p>构造函数中通过 <code>prototype</code> 访问原型对象。<br><img src="https://ws3.sinaimg.cn/large/005BYqpgly1fyizt18qrhj30uv0u041q.jpg" alt=""></p><h2 id="基于原型链的面向对象"><a href="#基于原型链的面向对象" class="headerlink" title="基于原型链的面向对象"></a>基于原型链的面向对象</h2><p>JS 在实现面向对象编程时传统的方法是基于原型链+构造函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">    <span class="keyword">this</span>.age = age</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在原型对象上添加方法</span></span><br><span class="line">Person.prototype.setName = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 生成对象</span></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person(<span class="string">'tom'</span>,<span class="number">10</span>)</span><br><span class="line"><span class="built_in">console</span>.log(  p1.getName()  );    <span class="comment">// tom</span></span><br></pre></td></tr></table></figure><p>JS 中实现面向对象编程的原则：</p><ol><li>属性定义到构造函数中</li><li>方法定义到原型对象上（避免每个对象都拷贝一份函数）</li></ol><h1 id="ES6-中的面向对象"><a href="#ES6-中的面向对象" class="headerlink" title="ES6 中的面向对象"></a>ES6 中的面向对象</h1><p>ES6 中提供了 <code>class</code> 可以实现面向对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">    <span class="keyword">constructor</span>(name,age) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name</span><br><span class="line">        <span class="keyword">this</span>.age = age</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    getName() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    setName(name) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person(<span class="string">'tom'</span>,<span class="number">10</span>)</span><br><span class="line"><span class="built_in">console</span>.log( p1.getName() )   <span class="comment">// tom</span></span><br></pre></td></tr></table></figure><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>在原型统的 JS 中我们使用原型对象实现继承，在 ES6 中我们可以使用 <code>extends</code> 实现类的继承。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">    <span class="keyword">constructor</span>(name,age) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name</span><br><span class="line">        <span class="keyword">this</span>.age = age</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    getName() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    setName(name) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 继承自 Person</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Boy</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="super"><a href="#super" class="headerlink" title="super"></a>super</h2><p>在继承时，如果子类中定义了构造函数，那么在构造函数中必须要调用 <code>super</code> 方法来调用父类的构造函数。</p><p><del>~</del>js<br>class Person<br>{<br>    // 构造函数<br>    constructor(name,age) {<br>        this.name = name<br>        this.age = age<br>    }<br>    getName() {<br>        return this.name<br>    }</p><pre><code>setName(name) {    this.name = name}</code></pre><p>}<br>// 继承自 Person<br>class Boy extends Person {<br>    constructor(name, age) {<br>        // 调用父类的构造函数<br>        super(name, age)<br>    }<br>}</p>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHPer-OOP</title>
      <link href="/2018/12/19/php-oop/"/>
      <url>/2018/12/19/php-oop/</url>
      
        <content type="html"><![CDATA[<h2 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h2><blockquote><p>PHP中的编程方式只有两种面向过程和面向对象。<br> OOP(Object Oriented Programming,面向对象程序设计)是一种高级的计算机编程架构。让我们更好的组织项目中的代码，目前所有流行的PHP框架都是面向对象的方式编写的，熟练掌握面&gt; 向对象是PHP开发者的必备技能。<br> <a id="more"></a><br> 面向对象中的概念比较多，这里列出来的只是一小部分<br><strong>以下需熟练掌握:</strong></p></blockquote><ul><li>类和对象</li><li>命名空间</li><li>类的自动加载</li><li>魔术方法</li><li>静态成员</li><li>继承<h3 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h3><h4 id="类"><a href="#类" class="headerlink" title="类"></a>类</h4><code>类</code> （ Class ） 是 面 向 对 象 程 序 设 计 （ OOP ， Object Oriented Programming）实现信息封装的基础。类是一种用户定义类型，也称类类型。每个类包含数据说明和一组操作数据或传递消息的函数。类的实例称为对象</li></ul><p>面向对象编程有三大特性：<code>封装</code>、<code>继承</code>、<code>多态</code>。其中封装的意思就是说所有的代码必须要写在一个类中，不能把代码写到类的外部。不过因为 PHP 并不是一个纯粹的面向对象的语言，PHP 中即支持面向过程的语法又支持面向对象的语法，所以在 PHP 中即使把代码写到类的外部也是可以的。</p><p>定义类的方法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 类</span>&#123;</span><br><span class="line">    <span class="comment">#类由属性和方法构成</span></span><br><span class="line">    <span class="comment">//常量</span></span><br><span class="line">    <span class="comment">//属性</span></span><br><span class="line">    <span class="comment">//方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>一般类名的首字母大写，比如<code>class Blog</code></li><li>一般一个类写在一个文件中，文件名和类名相同,比如Blog.php文件中定义<code>class blog</code></li><li>在类中只包含，常量，属性。<br>访问类型<br>属性和方法包含三种访问类型<code>public protected private</code> </li><li>public (公有的、默认的):所有的内部成员或外部成员都可以访问（读和写）这个类成员(包括成员属性和成员方法)</li><li>private (私有的):被定义为private的成员，对于同一个类里的所有成员是可见的，即没有访问限制；但对于该类的外部代码是不允许改变甚至读操作，对于该类的子类，也不能访问private修饰的成员</li><li>protected(受保护的):被修饰为protected的成员不能被该类的外部代码访问。但是对于该类的子类有访问权限，可以进行属性、方法的读及写操作，该子类的外部代码包括其的子类都不具有访问其属性和方法的权限。</li></ul><h4 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h4><p>对象是对类的实例化</p><p>类只是描述了要实现的功能，类中的代码要想执行，需要实例化出对象来，通过对象我们才能真正执行类中的代码。</p><p>类就相当于图纸定义了类的功能，对象是根据图纸制作出来的具体的实体。一个类可以创建出任意多个对象：</p><p>类的实例化：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> 类名;</span><br><span class="line"><span class="comment">#例 $blog = new Blog;</span></span><br></pre></td></tr></table></figure><p>例化类的对象之后，我们就可以使用对象来访问类中的属性和方法了。</p><p>说明：</p><ul><li>在其他文件中如想使用类，首先需要先引入类文件</li><li>类中的属性和方法都要使用 $对象-&gt; 访问</li><li>类中的 常量 和 静态成员 直接使用 类名:: 来访问</li></ul><p><span style="color:red;">注意:一个类能创建多个对象,一个对象只能是一个类创建的</span></p><h4 id="this"><a href="#this" class="headerlink" title="$this"></a>$this</h4><p>在类的外部我们使用 -&gt; 来访问类中的属性和方法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$blog-&gt;title=<span class="string">'haha'</span></span><br></pre></td></tr></table></figure><p>那么，在类的内部应该如何访问类中的属性和方法呢？<br>使用$this</p><p>在类中如何访问常量和静态成员呢？<br>使用self::</p><h3 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h3><p>我们开实际大型项目时，我们可能需要引入很多第三方的类库，那么这些类库中有没有可能出现同名的类呢？肯定会有！<br>为了解决类同名的问题，PHP 中引入了 ”命名空间“ 机制。</p><h4 id="namespace"><a href="#namespace" class="headerlink" title="namespace"></a>namespace</h4><p>我们可以使用<code>namespace</code>声明一个命名空间，然后在它后面定义的类就都属于这个命名空间，比如，我们声明一个叫做 test 的命名空间，并在空间中定义一个类：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">text</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：<code>namespace</code>必须是文件中的第一行代码。<br>这个 Student 类现在就属于 test 这个命名空间中，这时当我们再要使用这个类时，必须要在前面加上命名空间：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$student = <span class="keyword">new</span> test\Student;</span><br></pre></td></tr></table></figure><p>注意：命名空间使用 \ 符号。<br>这样不同类包中的同名的类就不会冲突了，因为不同类包的命名空间都不相同，比如：腾讯公司的 Log 可能是属于 Tencent 命名空间下，阿里公司的类包可能是属于 Ali 命名空间下，即使它们的类名都叫 Log 也不会冲突：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实例化阿里 Log 类</span></span><br><span class="line">$log = <span class="keyword">new</span> Ali\Log;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例化腾讯 Log 类</span></span><br><span class="line">$log1 = <span class="keyword">new</span> Tencent\Log;</span><br></pre></td></tr></table></figure><p>这就是命名空间的用途。</p><p>命名空间也可以有子命名空间：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 三级命名空间</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Ali</span>\<span class="title">Domain</span>\<span class="title">Beijing</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Log</span> </span>&#123; ... &#125;</span><br></pre></td></tr></table></figure><p>在实际工作当中，我们一般声明命名空间和类文件所在的目录相同。<br>比如：在 app/controllers 目录下有一个 BlogController 类：<br>app/controllers/BlogController.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">controllers</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlogController</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong><br>总结：</p><ol><li>为了避免类同名，所以引入命名空间</li><li>命名空间和类文件所在目录相同</li><li>namespace 必须是文件中的第一行代码</li></ol><h4 id="use"><a href="#use" class="headerlink" title="use"></a>use</h4><p>现在每次实例化一个类时，需要写很长的类名（包含命名空间），如何能简化呢？<br>方法一：在同一个命名空间下，可以省略命名空间<br>方法二：使用 use<br><strong>同一命名空间下</strong><br>在使用同一个命名空间里面的类时，可以省略命名空间，直接写类名。</p><p>比如，我们再创建一个 <code>models/User</code> 类：</p><p>models/User.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">models</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为这个类和同目录下的 Blog 类都在同一个命名空间 <code>app\models</code> 下，所以可以省略命名空间：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">models</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getBlog</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 引入类文件</span></span><br><span class="line">        <span class="keyword">require</span>(<span class="string">'./Blog.php'</span>);</span><br><span class="line">        </span><br><span class="line">        $blog = <span class="keyword">new</span> Blog;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：同一命名空间下的类，在使用时可以省略命名空间，但记住还是需要引入类文件的。<br><strong>use</strong><br>当使用不同命名空间中的类时，需要在实例化时加上命名空间，这会导致需要输入的类名比较长：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$blog = app\controllers\BlogController</span><br></pre></td></tr></table></figure><p>如果想要简化可以使用 <code>use</code> 语句。</p><p>use 的功能是在文件的开始引入一个命名空间下的类，引入之后就可以直接使用类名来使用这个类了：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">app</span>\<span class="title">controllers</span>\<span class="title">BlogController</span>;</span><br><span class="line"></span><br><span class="line">$blog = <span class="keyword">new</span> BlogController;</span><br></pre></td></tr></table></figure><p>在引入时也可以为类起别名：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">app</span>\<span class="title">controllers</span>\<span class="title">BlogController</span> <span class="title">as</span> <span class="title">BC</span>;</span><br><span class="line"></span><br><span class="line">$blog = <span class="keyword">new</span> BC;</span><br></pre></td></tr></table></figure><p>示例、创建 testUse.php 文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require</span>(<span class="string">'app/controllers/BlogController.php'</span>);</span><br><span class="line"><span class="keyword">require</span>(<span class="string">'app/models/Blog.php'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">app</span>\<span class="title">controller</span>\<span class="title">BlogController</span> <span class="title">as</span> <span class="title">BC</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">app</span>\<span class="title">models</span>\<span class="title">Blog</span>;</span><br><span class="line"></span><br><span class="line">$blog1 = <span class="keyword">new</span> BC;</span><br><span class="line">$blog2 = <span class="keyword">new</span> BC;</span><br><span class="line">$blog3 = <span class="keyword">new</span> BC;</span><br><span class="line"></span><br><span class="line">$blogModel = <span class="keyword">new</span> Blog;</span><br></pre></td></tr></table></figure><h3 id="类文件的自动加载"><a href="#类文件的自动加载" class="headerlink" title="类文件的自动加载"></a>类文件的自动加载</h3><p>有没有发现我们每次在使用一个类时都要先使用 <code>require</code> 引入类文件，在一个大的项目中我们需要使用数十个类，如果每次都要引入数十个类文件，实在是太麻烦了。</p><p>为了解决这个问题，PHP 为我们提供了类的自动加载机制，有了这个机制，我们就可以直接使用类了，然后 PHP 会自动引入相应的类文件，我们就不用一个一个的手动引入了。</p><h4 id="spl-autoload-register"><a href="#spl-autoload-register" class="headerlink" title="spl_autoload_register"></a>spl_autoload_register</h4><p>PHP 中提供了一个 <code>spl_autoload_register</code> 函数，该函数可以让我们注册一个函数到 PHP 中，然后当我们使用一个类时，如果 PHP 找不到这个类，就会调用我们注册的函数来加载相应的类文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用一个类 =&gt; 找不到？=&gt; 调用注册的函数 =&gt; 加载类文件 =&gt; 找到了 =&gt; 类可以使用了</span><br></pre></td></tr></table></figure><p>示例、注册一个类加载函数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义加载函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">load</span><span class="params">($class)</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 注册 load 函数</span></span><br><span class="line">spl_autoload_register(<span class="string">'load'</span>);</span><br></pre></td></tr></table></figure><p>代码说明：</p><ul><li>定义了一个 load 函数</li><li>注册到 PHP 中</li><li>当我们使用一个不存在的类时，load 函数会被调用，参数就是类的名字（包含命名空间）</li></ul><p>示例、创建一个 testLoad 文件</p><p>testLoad.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">load</span><span class="params">($class)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'我们需要加载：'</span> . $class;</span><br><span class="line">&#125;</span><br><span class="line">spl_autoload_register(<span class="string">'load'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例化</span></span><br><span class="line">$blog = <span class="keyword">new</span> app\models\Blog;</span><br></pre></td></tr></table></figure><p>启动 PHP 服务器 <code>php -S localhost:9999</code> 然后浏览器中运行代码：</p><p>因为我们没有加载类文件，所以报错显示找不到类类，但同时也可以看到我们的 load 函数被执行了。</p><p>总结：当一个不存在的类被使用时，我们注册的函数会被自动调用。</p><h3 id="魔术方法"><a href="#魔术方法" class="headerlink" title="魔术方法"></a>魔术方法</h3><p>在 OOP 中有一套特殊的方法，叫做魔术方法，它们的特点是：</p><ul><li>方法名以两个下划线开头（__）</li><li>在某一时刻自动被调用</li></ul><p>接下来我们来学习其中最重要的一个： __construct<br>其他的魔术方法在文末：</p><h4 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h4><p>__construct 是一个魔术方法，它在实例化一个类对象时会被调用，经常用来初始化类的数据，我们一般叫做：“构造方法”</p><h5 id="自动调用"><a href="#自动调用" class="headerlink" title="自动调用"></a>自动调用</h5><p>演示1、构造方法在实例化对象时被调用</p><p>每当使用 <code>new</code> 实例化一个类对象时，类中的构造方法就会被调用一次：</p><p>Boy.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Boy</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'hello world '</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$boy = <span class="keyword">new</span> Boy;    <span class="comment">// hello world;</span></span><br><span class="line">$boy1 = <span class="keyword">new</span> Boy;   <span class="comment">// hello world;</span></span><br></pre></td></tr></table></figure><h5 id="初始数据"><a href="#初始数据" class="headerlink" title="初始数据"></a>初始数据</h5><p>构造方法经常用来初始化类中的数据。我们通过在构造方法中添加参数来接收初始的数据。</p><p>Boy.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Boy</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($name)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name = $name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">hello</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'hello '</span>.$name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当一个类的构造方法上有参数时，在实例化这个类的对象时，必须要使用小括号依次设置参数值：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$boy = <span class="keyword">new</span> Boy(<span class="string">'小明'</span>);</span><br><span class="line">$boy1 = <span class="keyword">new</span> Boy(<span class="string">'三毛'</span>);</span><br></pre></td></tr></table></figure><p>示例、统计一个类所拥有的对象的总数。</p><p>要统计一个类被实例化的总数，原理很简单：每次实例化一个对象时就把计数加1。我们可以把代码写在构造方法中，因为每次使用 new 创建对象时，构造函数都会被调用。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Boy</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// 保存总的对象数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> $count=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 每次加1</span></span><br><span class="line">        <span class="keyword">self</span>::$count++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$boy = <span class="keyword">new</span> Boy;    </span><br><span class="line">$boy1 = <span class="keyword">new</span> Boy;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印总的记录数</span></span><br><span class="line"><span class="keyword">echo</span> Boy::$count;</span><br></pre></td></tr></table></figure><h3 id="静态成员"><a href="#静态成员" class="headerlink" title="静态成员"></a>静态成员</h3><p>在类中我们可以使用 <code>static</code> 定义静态成员。可以是静态属性也可以是静态的方法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Boy</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> $count=<span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getCount</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>::$count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> Boy::$count;</span><br></pre></td></tr></table></figure><p>代码说明：</p><ul><li>在方法或者属性前添加 <code>static</code> 来定义静态成员</li><li>在类外部使用 <code>类名::</code> 来访问静态成员，如 <code>Boy::$count</code> , <code>Boy::getCount()</code></li><li>在类内部使用 <code>self::</code> 访问静态成员，如：<code>self::$count</code></li></ul><p>静态成员和普通成员区别？</p><p>静态成员：静态成员属于类，无论有多少个对象，值只有一个。</p><p>普通成员：普通成员属于具体的对象，每个对象拥有自己的属性值。</p><p>比如：学生姓名就应该是一个普通属性，属于每一个同学，因为每个同学有自己的名字。而学生总人数这个属性就应该是一个静态属性，它属于“学生”这个大类，并不是某一个具体学生的属性。</p><p>同理，像身高、体重、性别这些都应该是普通属性，而平均年龄，最大年龄等应该属于静态属性。</p><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>继承是面向对象三大特性之一，通过继承我们可以避免编写重复的代码，让我们的代码管理起来更加有组织有层次。</p><p>继承：一个类可以继承自另一个类，继承之后就拥有了那个类中所有非私有的属性和方法。</p><h4 id="extends"><a href="#extends" class="headerlink" title="extends"></a>extends</h4><p>PHP 中使用 <code>extends</code> 实现继承。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $name;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">eat</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'eat'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Boy</span> <span class="keyword">extends</span> <span class="title">People</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$boy = <span class="keyword">new</span> Boy;</span><br><span class="line">$boy-&gt;name = <span class="string">'小明'</span>;</span><br><span class="line">$boy-&gt;eat();     <span class="comment">// eat</span></span><br></pre></td></tr></table></figure><p>代码说明</p><ul><li>一个类只能继承自一个父类（单继承），不能同时继承多个类</li><li>Boy 继承自 People ，所以 Boy 的类中就拥有了 name 属性和 eat 方法</li></ul><h4 id="避免重复代码"><a href="#避免重复代码" class="headerlink" title="避免重复代码"></a>避免重复代码</h4><p>实际应用中，我们经常把多个类共有的方法制作成一个父类，然后让这个类继承自这个父类，这样相同的代码就只需要写一次：</p><h4 id="动态绑定"><a href="#动态绑定" class="headerlink" title="动态绑定"></a>动态绑定</h4><p>继承时有一个特性：“动态绑定”，在实际应用中经常会用到，接下来我们来学习一下到底什么是动态绑定。</p><p>首先我们先来看一段代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $name=<span class="string">'tom'</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getName</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Boy</span> <span class="keyword">extends</span> <span class="title">People</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $name=<span class="string">'jack'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$boy = <span class="keyword">new</span> Boy;</span><br><span class="line">$people = <span class="keyword">new</span> People;</span><br><span class="line"></span><br><span class="line">$boy-&gt;getName();</span><br><span class="line">$people-&gt;getName();</span><br></pre></td></tr></table></figure><p>请问：最后两行分别输出的是什么？</p><p><code>$boy-&gt;getName()</code> 输出的是 “jack”。</p><p><code>$people-&gt;getName()</code> 输出的是 “tom”。</p><p>它们执行的代码是一样的，都是 <code>echo $this-&gt;name</code> ，为什么输出的结果却不同呢？</p><p>要知道原因，就要先搞清楚 <code>$this</code> 到底代表什么？</p><p><code>$this</code> 代表实例化的那个对象。</p><p>当 <code>new People</code> 时，<code>$this</code> 就代表 People 类的对象，所以得到的是 People 类中的 name。</p><p> 当<code>new Boy</code> 时， $this 代表 Boy 类的对象，所以得到的就是 Boy 类中的 name。</p><p>总结：<code>$this</code> 的值是动态的，所以叫做动态绑定，即：<code>$this-&gt;name</code> 的值到底是什么我们在编写类时并不确定，只有在使用 <code>new</code> 实例化对象时才能确定。</p><p>练习：以下代码的输出结果是？</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    $name = <span class="string">'tom'</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getName</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    $name = <span class="string">'jack'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span> <span class="keyword">extends</span> <span class="title">C</span></span>&#123;</span><br><span class="line">    $name = <span class="string">'ali'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$b = <span class="keyword">new</span> B;</span><br><span class="line">$b-&gt;getName();</span><br><span class="line"></span><br><span class="line">$c = <span class="keyword">new</span> C;</span><br><span class="line">$c-&gt;getName();</span><br><span class="line"></span><br><span class="line">$d = <span class="keyword">new</span> D;</span><br><span class="line">$c-&gt;getName();</span><br></pre></td></tr></table></figure><h3 id="Trait"><a href="#Trait" class="headerlink" title="Trait"></a>Trait</h3><p>Trait：特质，可以让我们不使用继承就可以在多个类中复用方法的机制。</p><h4 id="定义特质"><a href="#定义特质" class="headerlink" title="定义特质"></a>定义特质</h4><p>使用 <code>trait</code> 来定义一个特质，特质中只能定义方法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">trait</span> Fly</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">fly</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用特质"><a href="#使用特质" class="headerlink" title="使用特质"></a>使用特质</h4><p>定义了特质之后，我们就可以在一个类中使用 <code>use</code> 来引入这个特质，引入了特质之后，这个类就拥有了这个特质中的方法。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Superman</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">Fly</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$s = <span class="keyword">new</span> Superman;</span><br><span class="line">$s-&gt;fly();</span><br></pre></td></tr></table></figure><p>总结：</p><ol><li>trait 可以用来向一个类中添加方法</li><li>不用继承就可以实现方法的复用</li></ol><p>魔术方法：</p><ol><li><p>构造函数：__construct():</p><p> 构造函数是类中的一个特殊函数，当我们使用new关键字实例化对象时，相当于调用了类的构造函数。</p></li><li><p>析构函数：__destruct():</p><p> ①析构函数在对象被销毁释放之前自动调用；<br> ②析构函数不能带有任何的参数；<br> ③析构函数常用于对象使用完以后，释放资源，关闭资源等。</p></li><li><p>__set($key,$value):</p><p>给类私有属性赋值时自动调用，调用是给方法传递两个参数：需要设置的属性名、属性值</p></li><li><p>__get($key):<br> 给获取类私有属性时自动调用，调用是给方法传递一个参数：需要获取的属性名     </p></li><li><p><strong>isset($key):<br> 外部使用isset()函数检测私有属性时，自动调用。<br> 类外部使用isset();检测私有属性，默认检测不到（false）<br> 所以，我们可以使用</strong>isset()函数，在自动调用时，返回内部检测结果</p></li><li><p>__unset($key):<br> 外部使用unset()函数删除私有属性时，自动调用；</p></li><li><p>__clone:</p><p> ① 当使用clone关键字，克隆对象时，自动调用clone函数<br> ② __clone()函数类似于克隆是使用的构造函数，可以给新克隆对象赋初值<br> ③ 克隆函数里面的$this指的是新克隆的对象</p></li><li><p>__tostring()</p><p> 当使用echo等输出语句，直接打印对象时,调用 echo $zhangsan;那么， 可以指定<strong>tostring()方法的返回值，返回值需要是字符串。<br> 则使用echo函数打印时，将会打印出</strong>tostring()函数返回的字符串</p></li><li><p>__call()</p><p> 调用类中未定义或未公开的方法时，会自动执行__call()方法，自动执行时，会给call方法传递两个参数：<br> ① 调用的方法名<br> ② （数组）调用的方法的参数列表</p></li><li><p>__autoload()</p><p>① 这是唯一一个不在类中使用的魔术方法<br>② 当实例化一个不存在的类时，自动调用这个魔术方法<br>③ 调用时，会自动给<strong>autoload()传递一个参数：实例化的类名<br>所以，可以实现 使用这个方法，自动加载类文件的功能：<br>$zhangdan=new Person(“战三”);<br>//本文件没有Person类，会自动执行</strong>autoload加载person.class.php文件<br>复制代码</p></li><li><p><strong>sleep()：<br>① 当执行对象串行化（将对象通过一系列操作，转化为字符串的过程，称为串行化）的时候，会自动执行</strong>sleep()函数；<br>② __sleep()函数要求返回一个数组，数组中的值，就是可以串行化的属性， 不在数组中的属性，不能被串行化。</p></li><li><p><strong>wakeup()<br>① 当反串行化对象时，自动调用</strong>wakeup()方法；<br>②自动调用时，用于给反串行化产生的新对象的属性，进行重新赋值；</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> OOP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ySQL-PDO</title>
      <link href="/2018/12/12/mysql-pdo/"/>
      <url>/2018/12/12/mysql-pdo/</url>
      
        <content type="html"><![CDATA[<h2 id="PDO"><a href="#PDO" class="headerlink" title="PDO"></a>PDO</h2><p><strong>PDO（PHP 数据对象），是 PHP 中的一个扩展库，用来操作数据库</strong></p><p>使用 PDO 之前首先要确保 PHP 中安装了 PDO 这个扩展，我们可以使用以下两种方法来查看本地的 PHP 中是否安装了 PDO 扩展，同时要打开pdo_mysql扩展。</p><a id="more"></a><ol><li>使用 phpinfo() 函数并在浏览器查看</li><li>在命令行中执行 php -m 查看是否有 pdo 扩展</li></ol><p><strong>PDO 中一共提供了三个类</strong><br>PDO 类：PDO 的核心，主要负责连接数据、发送 SQL 语句等。<br>PDOStatement 类：主要用于解析结果集、实现预处理、事务等。<br>PDOException 类：主要用来代表 PDO 的异常。</p><h3 id="PDO的基本用法"><a href="#PDO的基本用法" class="headerlink" title="PDO的基本用法"></a>PDO的基本用法</h3><h4 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h4><p>创建 PDO 的对象，就是连接数据库</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="comment">//连接数据库</span></span><br><span class="line">    $pdo = <span class="keyword">new</span> \PDP(<span class="string">'mysql:host=IP地址;dbname=数据库名;'</span>,<span class="string">'用户名'</span>,<span class="string">'密码'</span>);</span><br><span class="line">    <span class="comment">//设置编码</span></span><br><span class="line">    $pdo -&gt;exec(<span class="string">"set names utf8"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">catch</span>(PDOException $e)&#123;</span><br><span class="line">   var_dump($e-&gt;getMessage());</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="断开连接"><a href="#断开连接" class="headerlink" title="断开连接"></a>断开连接</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$pdo = <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">#或</span></span><br><span class="line"><span class="keyword">unset</span>($pdo);</span><br></pre></td></tr></table></figure><h4 id="exec-方法"><a href="#exec-方法" class="headerlink" title="exec() 方法"></a>exec() 方法</h4><p>当要执行 insert、update、delete 等非 select 的语句时可以使用 PDO 类中提供的 exec 方法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$pdo-&gt;exec($sql);</span><br><span class="line"><span class="comment">//1.成功时返回受影响的条数，有可能值为 0。</span></span><br><span class="line"><span class="comment">//2. 失败时返回 false。</span></span><br><span class="line"><span class="comment">//3.在判断是否执行成功时应该使用 === 来判断。</span></span><br></pre></td></tr></table></figure><h4 id="query-方法"><a href="#query-方法" class="headerlink" title="query() 方法"></a>query() 方法</h4><p>当要执行 select 从表中获取数据时，需要使用以下类方法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$pdo-&gt;query($sql);</span><br><span class="line"><span class="comment">//1. 如果执行成功返回 PDOStatement 类的对象。</span></span><br><span class="line"><span class="comment">//2. 如果失败返回 false</span></span><br></pre></td></tr></table></figure><p>执行完 select 语句之后，PDO 会把数据保存到PDOStatement 类对象中返回，我们还需要使用这个类中的几个方法来获取数据</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$stmt = $pdo-&gt;query($sql);</span><br><span class="line">$stmt-&gt;rowCount(); <span class="comment">// 返回记录数</span></span><br><span class="line">$stmt-&gt;columnCount(); <span class="comment">// 返回列数</span></span><br><span class="line">$stmt-&gt;fetch([数据样式]); <span class="comment">// 取出一条记录（执行一次取出一条）</span></span><br><span class="line">$stmt-&gt;fetchAll([数据样式])<span class="comment">// 取出所有记录</span></span><br><span class="line"><span class="comment">//数据样式</span></span><br><span class="line"><span class="comment">// PDO::FETCH_ASSOC  :  返回关联数组(较常用)</span></span><br><span class="line"><span class="comment">//PDO::FETCH_BOTH  ：返回混合数组</span></span><br><span class="line"><span class="comment">//PDO::FETCH_NUM ：返回索引数组</span></span><br><span class="line"><span class="comment">//PDO::FETCH_OBJ ：返回对象</span></span><br><span class="line"><span class="comment">//PDO::FETCH__COLUMN ：返回某一列的值</span></span><br></pre></td></tr></table></figure><h4 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$id = $pdo-&gt;lastInsertId() <span class="comment">// 返回新插入的记录的 id</span></span><br><span class="line">$err =$pdo-&gt;errorInfo() <span class="comment">// 如果失败，返回包含错误信息的数组</span></span><br></pre></td></tr></table></figure><h3 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h3><p>预处理是另一种高级的执行 SQL 语句的方式。和前面学习的执行 SQL 语句的方式相比，预处理有以下两个好处<br>➢ 执行 SQL 语句的速度更快。<br>➢ 这种方式更加的安全（对数据过滤，防止 SQL 注入）</p><p>因为预处理有很多好处，所以我们以后尽量都使用预处理的方式来执行 SQL 语句。</p><p><strong>使用预处理的方式执行 SQL 语句主要分为两步：</strong></p><ol><li>先用 prepare 预执行 SQL 语句。</li><li>绑定数据并执行</li></ol><p><strong>预执行</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$sql= <span class="string">'insert into test values(?,?)'</span>;</span><br><span class="line"><span class="comment">//数据部分需要用？来代替，或用':字段名'来代替</span></span><br><span class="line"><span class="comment">//$sql= 'insert into test values(:name,:age)';</span></span><br><span class="line"></span><br><span class="line">$stmt = $pdo-&gt;prepare($sql)</span><br></pre></td></tr></table></figure><p><strong>绑定数据并执行</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$stmt-&gt;execute([</span><br><span class="line">    tom,</span><br><span class="line">    <span class="number">19</span></span><br><span class="line">]);</span><br><span class="line"><span class="comment">/*$stmt-&gt;execute([</span></span><br><span class="line"><span class="comment">    :name=&gt;'tom',</span></span><br><span class="line"><span class="comment">    :age=19</span></span><br><span class="line"><span class="comment">]);*/</span></span><br></pre></td></tr></table></figure><h3 id="事物"><a href="#事物" class="headerlink" title="事物"></a>事物</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置异常模式</span></span><br><span class="line">$pdo-&gt;setAttribute(PDO::ATTR_ERRMODE,PDO::ERRMODE_EXCEPTION);</span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//开启事务</span></span><br><span class="line">    $pdo -&gt;beginTransaction(); </span><br><span class="line">    <span class="comment">//执行的SQL语句</span></span><br><span class="line">    <span class="comment">//提交</span></span><br><span class="line">    $pdo-&gt;commit();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(<span class="keyword">Exception</span> $e)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//抓住try里面出现的错误，并且处理</span></span><br><span class="line">    <span class="comment">//echo $e-&gt;getMessage(); //获取异常信息</span></span><br><span class="line">    <span class="comment">//回滚</span></span><br><span class="line">    $pdo-&gt;rollBack();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="PDO属性"><a href="#PDO属性" class="headerlink" title="PDO属性"></a>PDO属性</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$pdo-&gt;setAttribute(属性名，属性值); <span class="comment">// 设置属性值</span></span><br><span class="line">$pdo-&gt;getAttribute(属性名); <span class="comment">// 获取属性值</span></span><br></pre></td></tr></table></figure><p><strong>属性列表</strong><br>PDO 中可以设置的属性非常多<br><img src="https://ws3.sinaimg.cn/large/005BYqpgly1fy3phhzt2wj30uf0a8419.jpg" alt=""><br>我们只先学习其中最常用的两个属性。<br><strong>获取数据模式</strong><br>我们可以使用 fetch 和 fetchAll 两个方法提取数据，在提供数据时可以通过参数设置提取模式：<br><strong>错误模式</strong></p><p>我们在执行每个操作时，都要考虑这个操作是否成功，如果失败了我们需要做相应的错误处理</p><p>但是，目前不同的操作错误处理的默认方式又是不同的，比如，连接数据库时如果失败会抛出 PDOException 异常，而其他操作失败时会返回 false。这就导致我们需要使用不同的方式<br>来处理错误。</p><p>我们可以通过错误模式属性，设置所有的错误模式相同，这样我们就可以写出统一的错误处<br>理代码。</p>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> PDO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker进阶-编制、制作镜像、目录共享</title>
      <link href="/2018/12/05/docker-Advanced/"/>
      <url>/2018/12/05/docker-Advanced/</url>
      
        <content type="html"><![CDATA[<p><strong>我们下载的镜像都是官方默认的镜像，这些镜像有时无法满足我们个性化的要求，这时我们就可以自己来制作镜像。制作镜像有三种方法:</strong></p><a id="more"></a><h2 id="制作镜像"><a href="#制作镜像" class="headerlink" title="制作镜像"></a>制作镜像</h2><p>1、使用<code>docker commit</code> 方法<br>优点: 方便，一个指令（把一个现有的容器制作成一个镜像）<br>缺点：没有记录制作的过程<br>2、使用Dockerfile + <code>docker build</code> 指令<br>3、本地文件系统导入模板</p><h3 id="docker-commit"><a href="#docker-commit" class="headerlink" title="docker commit"></a>docker commit</h3><p>我们可以直接使用<code>docker commit</code>指令将一个容器制作成一个镜像：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker commit 容器名称 镜像名称：标签</span><br></pre></td></tr></table></figure><h3 id="dockerfile"><a href="#dockerfile" class="headerlink" title="dockerfile"></a>dockerfile</h3><p>使用Dockerfile 文件制作镜像的过程：<br>1、编写Dockerfile文件<br>2、执行<code>docker build</code>指令生成镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t 镜像名称：标签 Dockerfile文件所在目录</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker build -t test:1.0 .</span><br><span class="line">#.表示当前目录</span><br></pre></td></tr></table></figure><p><strong>Dockerfile 详解</strong><br>我们一般可以把一个Dockerfile 文件内容分为四部分<br>| 四部分               | 指令                          |<br>| ——————– | —————————– |<br>| 基础镜像信息         | FROM （第一条指令必须是这个） |<br>| 维护者信息           | MAINTAINER                    |<br>| 镜像操作指令         | RUN、COPY、ADD、EXPOSE、ENV等 |<br>| 容器启动时执行的指令 | CMD、ENTRYPOINT               |</p><p>指令说明</p><ul><li><p>FROM：指定基础镜像<br>镜像是一层一层的,最底层是操作系统,我们要制作镜像必须要先试用 FROM 来指定一个镜像，然后我们是在这个基础镜像的基础上制作新镜像的：<br><img src="https://ws3.sinaimg.cn/large/005BYqpgly1fxvxg2leoij31gm0iejth.jpg" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FROM 镜像:标签</span><br><span class="line">#FROM alpine:3.8</span><br></pre></td></tr></table></figure></li><li><p>MAINTAINER:指定作者名称（选填）</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> alpine:<span class="number">3.8</span></span><br><span class="line"><span class="keyword">MAINTAINER</span> jiaobantang@<span class="number">126</span>.com</span><br></pre></td></tr></table></figure></li><li><p>RUN：运行 shell 命令<br>在制作镜像的过程中可以使用 RUN 来执行 shell 命令。<br>如：<br>1、在镜像中创建/php目录<br>2、为镜像安装vim 编辑器<br>3、设置 apk 的国内镜像源（多个指令用 &amp;&amp; 连接，如果指令太长可以使用 \ 写到下一行中）<br>4、更新 apk 的软件</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> alpine:<span class="number">3.8</span></span><br><span class="line"><span class="keyword">MAINTAINER</span> jiaobantang@<span class="number">126</span>.com</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir /php</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apk add vim</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">echo</span> http://mirrors.ustc.edu.cn/alpine/v3.8/main &gt; /etc/apk/repositories &amp;&amp; \</span></span><br><span class="line"><span class="bash"><span class="built_in">echo</span> http://mirrors.ustc.edu.cn/alpine/v3.8/community &gt;&gt; /etc/apk/repositories</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apk update &amp;&amp; apk upgrade</span></span><br></pre></td></tr></table></figure></li><li><p>COPY、ADD 复制本地文件到镜像中</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ADD/COPY 源目录 目标目录</span><br></pre></td></tr></table></figure><p>ADD：该命令将复制指定的源目录到容器中的目标目录。 其中源目录可以是Dockerfile所在目录的一个相对路径；也可以是一个 URL；还可以是一个 tar 文件（自动解压为目录）。<br>COPY ：当使用本地目录为源目录时，推荐使用 COPY。<br>示例、在制作镜像时复制当前目录中的 php 目录到镜像中的 /php 目录中：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> alpine:<span class="number">3.8</span></span><br><span class="line"><span class="keyword">MAINTAINER</span> jiaobantang@<span class="number">126</span>.com</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir /php</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apk add vim</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">echo</span> http://mirrors.ustc.edu.cn/alpine/v3.8/main &gt; /etc/apk/repositories &amp;&amp; \</span></span><br><span class="line"><span class="bash"><span class="built_in">echo</span> http://mirrors.ustc.edu.cn/alpine/v3.8/community &gt;&gt; /etc/apk/repositories</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apk update &amp;&amp; apk upgrade</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> php /php</span></span><br></pre></td></tr></table></figure><ul><li>ENV :设置环境变量。<br>可以使用 ENV 来设置镜像中的环境变量。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ENV &lt;key&gt; &lt;value&gt;</span><br></pre></td></tr></table></figure></li><li>EXPOSE：暴露端口<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPOSE  &lt;port&gt; [&lt;port&gt;...]</span><br></pre></td></tr></table></figure></li></ul><p>告诉 Docker 服务端容器暴露的端口号，供互联系统使用。在启动容器时需要通过 -P，Docker 主机会自动分配一个端口转发到指定的端口。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPORT 80 800 880</span><br></pre></td></tr></table></figure><ul><li>ENTRYPOINT<br>容器在启动时执行的命令，一个 Dockerfile 中只能有一个 ENTRYPOINT 指令，如果写了多个，那么只有最后一个会执行。</li></ul><p>语法有两种：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ENTRYPOINT [&quot;命令&quot;, &quot;参数1&quot;, &quot;参数2&quot; ...]</span><br><span class="line">ENTRYPOINT 命令 参数1 参数2 ....</span><br></pre></td></tr></table></figure><p>示例：在启动容器时，输出 ‘hello’</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">"echo"</span>, <span class="string">"hello"</span>]</span></span><br></pre></td></tr></table></figure><ul><li>CMD</li></ul><p>容器在启动时执行的命令，一个 Dockerfile 中只能有一个 CMD 指令，如果写了多个，那么只有最后一个会执行。</p><p>CMD 与 ENTRYPOINT 的不同：</p><p>1、CMD 设置的命令可以被 <code>docker run</code> 时指令的要执行的命令覆盖，而 ENTRYPOINT 的命令不会被覆盖。</p><p>2、CMD 和 ENTRYPOINT 同时存在时，CMD 中的内容会变成 ENTRYPOINT 中指令命令的默认参数，该参数可以被 <code>docker run</code> 时设置的命令覆盖。</p><ul><li><p>WORKDIR<br>指定当前的工作目录。<br>比如下面指令先切换到了 /php 目录中，之后执行的指令都是在这个目录下的操作（相对于 <code>cd /php</code>）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">WORKDIR /php</span><br><span class="line">mkdir abc       # 创建 /php/abc 目录</span><br></pre></td></tr></table></figure></li><li><p>VOLUME<br>创建一个可以从本地主机或其他容器挂载的挂载点，一般用来存放数据库和需要保持的数据等。<br>格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">VOLUME [&quot;目录&quot;]</span><br></pre></td></tr></table></figure><p>指定了挂载目录之后，就可以在创建容器时使用 <code>-v</code> 或者 <code>--volumes-from</code> 来指令共享挂载这些目录。</p></li></ul><h3 id="制作带扩展的-PHP-镜像"><a href="#制作带扩展的-PHP-镜像" class="headerlink" title="制作带扩展的 PHP 镜像"></a>制作带扩展的 PHP 镜像</h3><p>创建 Dockerfile</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> php:<span class="number">7.2</span>-fpm-alpine</span><br><span class="line"><span class="keyword">MAINTAINER</span> <span class="string">"jiaobantang@126.com"</span></span><br><span class="line"><span class="comment">#使用国内 apk 源</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">echo</span> http://mirrors.ustc.edu.cn/alpine/v3.8/main &gt; /etc/apk/repositories &amp;&amp; \</span></span><br><span class="line"><span class="bash">    <span class="built_in">echo</span> http://mirrors.ustc.edu.cn/alpine/v3.8/community &gt;&gt; /etc/apk/repositories &amp;&amp; \</span></span><br><span class="line"><span class="bash">    apk update &amp;&amp; apk upgrade</span></span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apk add libpng-dev autoconf gcc g++ make openssl-dev</span></span><br><span class="line"><span class="comment">##### 安装 PHP 扩展 </span></span><br><span class="line"><span class="comment"># 安装 gd、pdo_mysql 库</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> docker-php-ext-install gd pdo_mysql sockets pcntl zip mysqli opcache</span></span><br><span class="line"><span class="comment"># 更新 pecl</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> pecl channel-update pecl.php.net</span></span><br><span class="line"><span class="comment"># 安装 redis 扩展</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">echo</span> -e <span class="string">"\n\n"</span> | pecl install redis &amp;&amp; docker-php-ext-enable redis</span></span><br><span class="line"><span class="comment"># 安装 yaf 扩展</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> pecl install yaf &amp;&amp; docker-php-ext-enable yaf</span></span><br><span class="line"><span class="comment"># 安装 swoole 扩展</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">echo</span> -e <span class="string">"yes\nyes\n\n\n\n\n"</span> | pecl install swoole &amp;&amp; docker-php-ext-enable swoole</span></span><br><span class="line"><span class="comment"># 安装 git composer</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apk add git composer</span></span><br></pre></td></tr></table></figure><p>创建镜像：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t 镜像名:标签 .</span><br></pre></td></tr></table></figure><h3 id="上传镜像"><a href="#上传镜像" class="headerlink" title="上传镜像"></a>上传镜像</h3><p>镜像制作好之后，我们可以吧镜像上传到docker的仓库中<br>docker 的官方网站为注册用户提供了一个 docker 仓库，我们可以把我们自己的镜像放到 docker 官方的仓库上。</p><h3 id="注册账号"><a href="#注册账号" class="headerlink" title="注册账号"></a>注册账号</h3><p>因为需要谷歌人机验证，请自行搬梯子</p><h3 id="登陆"><a href="#登陆" class="headerlink" title="登陆"></a>登陆</h3><p>有了自己的仓库之后，我们就可以把本地的镜像上传到仓库中给所有人使用。</p><p>1、首先需要先在本地登录</p><p>执行以下指令进行登录（需要输入账号、密码）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker login</span><br></pre></td></tr></table></figure><p>2、打标签</p><p>登录成功之后，还需要为要上传的镜像打一个标签，注意这个标签必须要以 <code>账号/</code> 开头：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker tag 本地镜像:标签   账号/镜像名称:标签</span><br></pre></td></tr></table></figure><p>比如，我的账号是 jiaobantang ，现在我要将本地的 php:1.0 上传到仓库中，那么首先我们对这个镜像打标签：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker   tag    php:1.0   fortheday001/php:1.0</span><br></pre></td></tr></table></figure><p>3、上传</p><p>打完标签之后，我们就可以上传了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker push 账号/镜像:标签</span><br></pre></td></tr></table></figure><p>如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker push jiaobantang/php:1.0</span><br></pre></td></tr></table></figure><p>这个指令会将镜像上传到 jiaobantang 这个仓库中。</p><h3 id="构建私有镜像仓库"><a href="#构建私有镜像仓库" class="headerlink" title="构建私有镜像仓库"></a>构建私有镜像仓库</h3><p>官网只可以设置一个私有仓库，多个需要RMB<br><strong>可以自己搭建一个私有镜像仓库</strong></p><ul><li>拉了镜像<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull registry</span><br></pre></td></tr></table></figure></li></ul><ul><li>创建容器</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name dockerhub -d -p 绑定端口号:5000 registry</span><br></pre></td></tr></table></figure><ul><li>上传到私有仓库</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker tag 镜像:标签  仓库IP:绑定端口号/镜像:标签</span><br><span class="line">docker push 仓库IP:绑定端口号/镜像:标签</span><br></pre></td></tr></table></figure><p>如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker tag alpine:3.8  localhost:5000/alpine:3.8</span><br><span class="line">docker push localhost:5000/alpine:3.8</span><br></pre></td></tr></table></figure><h2 id="编排"><a href="#编排" class="headerlink" title="编排"></a>编排</h2><h3 id="为什么要使用编排"><a href="#为什么要使用编排" class="headerlink" title="为什么要使用编排"></a>为什么要使用编排</h3><p>当容器多时，一个一个的管理 太麻烦，所以我们可以使用编排，通过一个简单指令来管理多个容器。<br>使用流程：</p><p>1、创建 docker-compose.yml 配置文件（yaml语法）</p><p>2、使用 <code>docker-compose</code> 来指令管理这个集群</p><h3 id="创建配置文件"><a href="#创建配置文件" class="headerlink" title="创建配置文件"></a>创建配置文件</h3><p>配置文件默认使用 <code>docker-compose.yml</code> 做为文件名，其中使用 yaml 语法编写。<br>yaml 语法说明：</p><p>​    a. 缩近代表子选项目，如下面的 mysql 和 php 就是 services 的子选项。<br>​    b. - 代表有多个值（相当于数组），如下面的 ports 下就绑定了两个端口号（注意 - 后面要加空格 ）</p><p>例子：创建一个 mysql 和一个 PHP 容器，PHP依赖于mysql：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">mysql:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:5.7.24</span></span><br><span class="line">    <span class="attr">ports:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">"43306:3306"</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"55555:3306"</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_ROOT_PASSWORD=123123</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/data:/var/mysql/data</span></span><br><span class="line">  <span class="attr">php:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">fortheday001/php</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">links:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mysql:mysql</span></span><br></pre></td></tr></table></figure><ul><li>version：指定使用的版本，这个要和使用的 docker 的版本对应</li><li>services ：配置要启动的容器</li><li>mysql、php：启动的容器的名字，可以自定义</li><li>image：启动容器需要使用的镜像</li><li>ports：需要映射的端口号</li><li>environment：启动容器时需要设置的环境变量</li><li>volumes：需要挂载的硬盘</li><li>depends_on：依赖的容器，这一项决定了容器在启动时的顺序</li><li>links：启动容器时的连接<h3 id="编排指令"><a href="#编排指令" class="headerlink" title="编排指令"></a>编排指令</h3></li></ul><p>创建好配置文件之后，就可以使用 <code>docker-compose</code> 指令来管理配置文件中配置的容器了。</p><p>注意：执行指令时必须要在配置文件的同级目录中执行。</p><p>常用的指令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d   # 创建所有容器并在后台运行</span><br><span class="line">docker-compose stop      # 停止所有容器</span><br><span class="line">docker-compose down --volumes   # 删除所有容器以及挂载的目录</span><br><span class="line">docker-compose ps     # 查看当前这个集群中的容器的状态</span><br></pre></td></tr></table></figure><h2 id="目录共享"><a href="#目录共享" class="headerlink" title="目录共享"></a>目录共享</h2><p>我们在启动容器时，可以添加 <code>--volumes-from</code> 这个参数，和另一个容器共享目录。<br>流程：</p><p>1、先在一个容器启动时使用 -v 参数设置挂载的目录（挂载之后才允许其它容器来共享）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name abc -d -v /var/www/html fortheday001/php</span><br></pre></td></tr></table></figure><p>-v 这里并没有指定绑定到的位置，那么它会随机绑定到一个位置上（这种不能和主机共享目录）</p><p>注意：如果绑定时不指定 绑定的位置 ，那么不能和主机共享目录，只能用来容器之间共享目录。</p><p>2、其它的容器在启动时可以使用 <code>--volumes-from</code> 来共享</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name bcd -d --volumes-from abc fortheday001/php</span><br></pre></td></tr></table></figure><p>扩展：可以通过 <code>docker inspect</code> 指令查看一个容器已经挂载的目录：</p><p>docker inspect abc 查看abc容器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&quot;Mounts&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;Type&quot;: &quot;volume&quot;,</span><br><span class="line">                &quot;Name&quot;: &quot;92e89eeb09791da95e9a67cc0945d531407dc5b605e818fdf2300e27d73cf5f0&quot;,</span><br><span class="line">                &quot;Source&quot;: &quot;/var/lib/docker/volumes/92e89eeb09791da95e9a67cc0945d531407dc5b605e818fdf2300e27d73cf5f0/_data&quot;,</span><br><span class="line">                &quot;Destination&quot;: &quot;/var/www/html&quot;,</span><br><span class="line">                &quot;Driver&quot;: &quot;local&quot;,</span><br><span class="line">                &quot;Mode&quot;: &quot;&quot;,</span><br><span class="line">                &quot;RW&quot;: true,</span><br><span class="line">                &quot;Propagation&quot;: &quot;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br></pre></td></tr></table></figure><p>比如：我们现在有两个容器 a 、b 现在我们希望b能够共享a中的/data目录 ：</p><p>那么我们应该在启动 b 容器时添加这个参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name b -d --volues-from a    镜像的名字..</span><br></pre></td></tr></table></figure><p>这个指令就是创建 b 容器并且和 a 容器共享目录 。</p><p>思考：那么到底共享了 a 中的哪个目录 。</p><p>答：只能共享 a 容器中挂载了的目录（启动a 时使用 <code>-v</code> 挂载的路径 ）</p><h3 id="主机容器之间共享"><a href="#主机容器之间共享" class="headerlink" title="主机容器之间共享"></a>主机容器之间共享</h3><p>如果希望容器和主机也共享目录，那么在使用 <code>-v</code> 参数挂载目录时要指定要挂载的主机的目录 。</p><p>这个只能在容器之间共享</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name abc -d -v /var/www/html fortheday001/php</span><br></pre></td></tr></table></figure><p>如果希望这个目录和主机也共享，那么必须要挂载到主机的目录上：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name abc -d -v C:/code/html:/var/www/html fortheday001/php</span><br></pre></td></tr></table></figure><h2 id="进入容器-镜像的方法"><a href="#进入容器-镜像的方法" class="headerlink" title="进入容器/镜像的方法"></a>进入容器/镜像的方法</h2><h3 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h3><p>当我们要进入一个正在运行的容器时可以使用以下这个指令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it 容器的名称 /bin/sh</span><br></pre></td></tr></table></figure><p>-it ：以交互的方式运行 /bin/sh 指令</p><h3 id="进入镜像"><a href="#进入镜像" class="headerlink" title="进入镜像"></a>进入镜像</h3><p>有时我们希望进入一个还没有创建容器的镜像，这时我们可以使用下面这个指令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --rm 镜像的名字 /bin/sh</span><br></pre></td></tr></table></figure><p>原理：创建一个临时的容器然后进入，退出时删除容器（–rm）</p><p>-it ：以交互的方式运行 /bin/sh 指令<br>–rm ：退出指令时删除容器</p><blockquote><p>[mark] (参考自我的上课讲义)完！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>部署nginx项目集群</title>
      <link href="/2018/12/05/docker-nginx/"/>
      <url>/2018/12/05/docker-nginx/</url>
      
        <content type="html"><![CDATA[<h2 id="部署nginx项目集群"><a href="#部署nginx项目集群" class="headerlink" title="部署nginx项目集群"></a>部署nginx项目集群</h2><a id="more"></a><h3 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h3><p><img src="https://ws3.sinaimg.cn/large/005BYqpgly1fxvwub78brj31i60rcq8r.jpg" alt=""></p><h3 id="创建两个项目服务器"><a href="#创建两个项目服务器" class="headerlink" title="创建两个项目服务器"></a>创建两个项目服务器</h3><p>如架构图所示，我们需要两台运行项目的容器</p><p>首先我们需要创建一个可以用来运行我们项目的容器，从图上可以看出这个容器需要连接数据库主服务器和从服务器的负载均衡，所以在创建容器时需要使用 –link 连接到两个容器。<br>因为要运行 PHP 的代码所以我们需要使用 <code>php:7.2-fpm-alpine</code> 这个镜像来创建容器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name xxxx1 -d --link mysql13306:mysqlwrite --link haproxy:mysqlread php:7.2-fpm-alpine</span><br></pre></td></tr></table></figure><h3 id="安装PHP扩展"><a href="#安装PHP扩展" class="headerlink" title="安装PHP扩展"></a>安装PHP扩展</h3><p>PHP 官方默认的镜像中必要运行 PHP 项目必须要的扩展：如 GD 、pdo_mysql 等，所以我们在创建了容器之后需要进入容器中去，为 PHP 添加扩展。</p><p>1、进入刚创建的容器中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it xxxx1 /bin/sh</span><br></pre></td></tr></table></figure><p>2、设置国内仓库<br>为了安装的更快，首先先执行以下三个命令来设置使用国内的包管理源：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo http://mirrors.ustc.edu.cn/alpine/v3.8/main &gt; /etc/apk/repositories</span><br><span class="line">echo http://mirrors.ustc.edu.cn/alpine/v3.8/community &gt;&gt; /etc/apk/repositories</span><br><span class="line">apk update &amp;&amp; apk upgrade</span><br></pre></td></tr></table></figure><p>3、安装 gd 扩展</p><p>通过查看 PHP 的镜像文档，我们找到安装扩展可以使用 <code>docker-php-ext-install</code> 这个命令，有了这个命令可以大大简化我们安装扩展的步骤。</p><p>安装 gd 扩展时首先要安装 libpng 这个包，否则会安装失败。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apk add libpng-dev          # 安装 libpng-dev 这个包</span><br><span class="line">docker-php-ext-install gd   # 安装 gd 扩展</span><br></pre></td></tr></table></figure><p>4、安装 pdo_mysql 扩展</p><p>接下来再安装 pdo_mysql 这个扩展，否则 pdo 无法操作 mysql 数据库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-php-ext-install pdo_mysql</span><br></pre></td></tr></table></figure><p>到此安装扩展完成。</p><h3 id="复制代码到容器"><a href="#复制代码到容器" class="headerlink" title="复制代码到容器"></a>复制代码到容器</h3><p>安装好了扩展之后，运行我们 API 项目的基本环境就准备好了，接下来我们需要把 API 项目的代码复制到这个容器中。</p><p>在<code>主机上</code> 执行下面命令复制项目代码到容器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp 主机项目目录    xxxx:/var/www/html</span><br></pre></td></tr></table></figure><p>复制完代码之后，我们还需要设置项目中 <code>storage</code> 目录的权限，因为 Laravel 框架的项目要求 <code>storage</code> 目录必须要有写权限才能运行，而在 Linux 系统下默认是没有写权限的，所以复制完项目到容器之后，为项目分配写权限。</p><p>进入容器，然后执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod -R 777 /var/www/html</span><br></pre></td></tr></table></figure><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><p>项目代码复制到容器中之后，我们还需要修改项目的配置文件，主要修改数据库的配置（如果用到了 Redis 也需要修改 Redis 的配置，因为这里没有考虑 Redis ，所以先不考虑）。</p><p>使用 vi 编辑器修改 config/database.php 修改数据库的主机为创建容器时 –link 进来的别名：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'mysql'</span> =&gt; [                                                           </span><br><span class="line">    <span class="string">'read'</span> =&gt; [                                                        </span><br><span class="line">        <span class="string">'host'</span>=&gt; <span class="string">'mysqlread'</span>,        <span class="comment"># MySQL 主服务器的别名                                     </span></span><br><span class="line">    ],                                                                 </span><br><span class="line">    <span class="string">'write'</span> =&gt; [                                                       </span><br><span class="line">        <span class="string">'host'</span>=&gt; <span class="string">'mysqlwrite'</span>,       <span class="comment"># MySQL 从服务器负载均衡的别名                                  </span></span><br><span class="line">    ],                                                                 </span><br><span class="line">    <span class="string">'driver'</span> =&gt; <span class="string">'mysql'</span>,                                               </span><br><span class="line">    <span class="comment">// 'host' =&gt; env('DB_HOST', '127.0.0.1'),                          </span></span><br><span class="line">    <span class="string">'port'</span> =&gt; env(<span class="string">'DB_PORT'</span>, <span class="string">'3306'</span>),                                  </span><br><span class="line">    <span class="string">'database'</span> =&gt; env(<span class="string">'DB_DATABASE'</span>, <span class="string">'forge'</span>),                         </span><br><span class="line">    <span class="string">'username'</span> =&gt; env(<span class="string">'DB_USERNAME'</span>, <span class="string">'forge'</span>),                         </span><br><span class="line">    <span class="string">'password'</span> =&gt; <span class="string">'123123'</span>,                                            </span><br><span class="line">    <span class="comment">// 'password' =&gt; env('DB_PASSWORD', ''),                           </span></span><br><span class="line">    <span class="string">'unix_socket'</span> =&gt; env(<span class="string">'DB_SOCKET'</span>, <span class="string">''</span>),                             </span><br><span class="line">    <span class="string">'charset'</span> =&gt; <span class="string">'utf8mb4'</span>,                                            </span><br><span class="line">    <span class="string">'collation'</span> =&gt; <span class="string">'utf8mb4_unicode_ci'</span>,                               </span><br><span class="line">    <span class="string">'prefix'</span> =&gt; <span class="string">''</span>,                                                    </span><br><span class="line">    <span class="string">'prefix_indexes'</span> =&gt; <span class="keyword">true</span>,                                          </span><br><span class="line">    <span class="string">'strict'</span> =&gt; <span class="keyword">true</span>,                                                  </span><br><span class="line">    <span class="string">'engine'</span> =&gt; <span class="keyword">null</span>,                                                  </span><br><span class="line">],</span><br></pre></td></tr></table></figure><p>到此项目的容器就制作好了，容器中的项目已经可以正常运行起来了。</p><h3 id="制作项目镜像"><a href="#制作项目镜像" class="headerlink" title="制作项目镜像"></a>制作项目镜像</h3><p>经过前面的几个操作我们就已经制作了一个可以运行PHP项目的容器，接下来，我们可以把我们制作好的容器保存成为一个镜像，这样当我们需要再创建更多相同的容器时，就可以直接使用镜像创建就可以了。</p><p>制作镜像常用两种方法：<code>docker commit</code> 指令 和 <code>Dockerfile</code> 文件。这里我们使用 <code>docker commit</code> 这个指令来制作镜像。docker exec 可以把一个现有的容器制作成为一个镜像，语法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker commit 容器名称 镜像名:标签名</span><br></pre></td></tr></table></figure><p>所以，把我们这个 API 容器制作成镜像的指令是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker commit xxxx1 xxxx:1.0</span><br></pre></td></tr></table></figure><p>制作完之后，执行 <code>docker images</code> 就可以查看到制作的镜像了。</p><h3 id="再创建一个项目容器"><a href="#再创建一个项目容器" class="headerlink" title="再创建一个项目容器"></a>再创建一个项目容器</h3><p>根据我们最前面设计架构图，我们需要有两个 API 服务器，所以我们需要再创建一个 API 项目的容器，因为我们刚刚已经制作好了镜像，所以我们直接使用这个镜像就可以创建一个相同的 API 容器了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name xxxx2 -d --link mysql13306:mysqlwrite --link haproxy:mysqlread xxxx:1.0</span><br></pre></td></tr></table></figure><h2 id="nginx-负载均衡"><a href="#nginx-负载均衡" class="headerlink" title="nginx 负载均衡"></a>nginx 负载均衡</h2><p>有了 API 项目的容器之后，最后我们还需要创建一个 Nginx 容器，这个容器有两个用途：</p><p>1、做为 WEB 服务器让用户来访问</p><p>2、做为负载均衡服务器转发请求到后端 API 服务器</p><h3 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a>创建容器</h3><p>首先，我们需要先创建一个 nginx 容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name xxxx_nginx -d -p 49999:80 --link xxxx1:xxxx_gate1 --link xxxx2:xxxxgate2 nginx:1.15.6-alpine</span><br></pre></td></tr></table></figure><h2 id="配置-nginx"><a href="#配置-nginx" class="headerlink" title="配置 nginx"></a>配置 nginx</h2><p>创建了容器之后，我们需要配置 nginx 服务器。</p><p>1、进入 nginx 容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it xxxx+nginx /bin/sh</span><br></pre></td></tr></table></figure><p>2、修改 nginx 配置文件</p><p>/etc/nginx/conf.d/default.conf</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"># 定义 后端服务器， api 是这一组的名字</span><br><span class="line">upstream api &#123;</span><br><span class="line"> # max_fails=3：允许失败3 次，第4次再失败就不再向这台服务器转发(健康检查)</span><br><span class="line"> # fail_timeout：设置连接超时时间 </span><br><span class="line"> # weight=1:设置转发的权重</span><br><span class="line">  server xxxx_gate1:9000 max_fails=3 fail_timeout=3s weight=1;</span><br><span class="line">  server xxxx_gate2:9000 max_fails=3 fail_timeout=3s weight=1;</span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    ...</span><br><span class="line">    location / &#123;</span><br><span class="line">         try_files $uri $uri/ /index.php?$query_string;    # Laravel 框架需要添加这一项进行 url 重写，否则无法运行</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    location ~ \.php$ &#123;         </span><br><span class="line">        fastcgi_pass   api;      # 要转发的后端服务器组</span><br><span class="line">        fastcgi_index  index.php;</span><br><span class="line">        # 指定 API 服务器上项目所在目录，注意要指定到 public 目录下(laravel框架public是根目录)</span><br><span class="line">        fastcgi_param  SCRIPT_FILENAME  /var/www/html/项目目录名称/public$fastcgi_script_name;</span><br><span class="line">        include        fastcgi_params;</span><br><span class="line">    &#125; </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、重启服务器</p><p>修改了配置文件之后，退出容器，重新启动相关的几个容器，然后在浏览器中访问</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:49999</span><br></pre></td></tr></table></figure><p>即可访问网站了。<br>至此我们就把项目部署成集群的架构了。</p><blockquote><p>[mark] (参考自我的上课讲义)  未完待续！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL主,从复制与负载均衡&#39;</title>
      <link href="/2018/12/05/docker-mysql/"/>
      <url>/2018/12/05/docker-mysql/</url>
      
        <content type="html"><![CDATA[<h2 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h2><a id="more"></a><h3 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h3><p><strong>所用到的软件</strong><br>Docker＋haproxy(负载均衡)+MySQL</p><p><img src="https://ws3.sinaimg.cn/large/005BYqpgly1fxvvkqkhspj313s0i8n04.jpg" alt=""></p><h3 id="启动三台MySQL服务器"><a href="#启动三台MySQL服务器" class="headerlink" title="启动三台MySQL服务器"></a>启动三台MySQL服务器</h3><p>拉取 MySQL 镜像:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql:5.7</span><br></pre></td></tr></table></figure><p>启动三个容器，并同时修改它们的MySQL配置文件，修改配置文件中的四项：</p><ol><li>–server-id:设置一个唯一的id(正整数就行,集群中id不能重复)</li><li>–log-bin:启动二进制日志并设置二进制日志文件的名字</li><li>–character-set-server:设置编码</li><li>–collation-server:设置效验规则<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run --name mysql13306 -d -p 13306:3306  -e MYSQL_ROOT_PASSWORD=123123 mysql:5.7.24 --server-id=1 --log-bin=mysql-bin --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci</span><br><span class="line"></span><br><span class="line">docker run --name mysql13307 --link mysql13306:mysqlmaster -d -p 13307:3306  -e MYSQL_ROOT_PASSWORD=123123 mysql:5.7.24 --server-id=2 --log-bin=mysql-bin --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci</span><br><span class="line"></span><br><span class="line">docker run --name mysql13308 --link mysql13306:mysqlmaster -d -p 13308:3306  -e MYSQL_ROOT_PASSWORD=123123 mysql:5.7.24 --server-id=3 --log-bin=mysql-bin --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci</span><br></pre></td></tr></table></figure><h3 id="设置主服务器"><a href="#设置主服务器" class="headerlink" title="设置主服务器"></a>设置主服务器</h3>创建好服务器之后，我们需要首先连接主服务器并做以下设置：</li></ol><p>1、创建复制用的账号</p><p>我们需要在主服务器上创建一个账号，然后从服务器就可以使用这个账号连接到主服务器并读取二进制文件实现数据同步。</p><p>在主服务器上执行以下 SQL 语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">replication</span> <span class="keyword">slave</span> <span class="keyword">ON</span> *.* <span class="keyword">TO</span> <span class="string">'slave'</span>@<span class="string">'%'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'111111'</span>;</span><br></pre></td></tr></table></figure><p>2、查看主服务器状态<br>创建好账号之后，我们还需要查看一下当前主服务器上二进制日志的状态，在后面配置从服务器时需要使用。</p><p>执行以下 SQL 语句查看：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show master status</span><br></pre></td></tr></table></figure><p><img src="https://ws3.sinaimg.cn/large/005BYqpgly1fxvvl9tn9nj30c803ydfu.jpg" alt=""></p><p><strong>注意 ：</strong> 得到这两个值之后，不要再对主服务器有任何 SQL 的写操作（否则这两个值还会变）直到从服务器配置成功。</p><p>到此主服务器配置完成，接下来我们需要配置两个从服务器。</p><h3 id="设置从服务器"><a href="#设置从服务器" class="headerlink" title="设置从服务器"></a>设置从服务器</h3><p>在两个从服务器上执行以下三条 SQL 语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">stop</span> <span class="keyword">slave</span>;       <span class="comment"># 先停止复制功能</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置主服务器IP、账号、密码、二日志状态 </span></span><br><span class="line"><span class="keyword">change</span> <span class="keyword">master</span> <span class="keyword">to</span> </span><br><span class="line">master_host=<span class="string">"mysqlmaster"</span>,</span><br><span class="line">master_user=<span class="string">"slave"</span>,</span><br><span class="line">master_password=<span class="string">"111111"</span>,</span><br><span class="line">master_log_file=<span class="string">"mysql-bin.000003"</span>,    <span class="comment"># 这个值修改为前面主服务器的 File 值</span></span><br><span class="line">master_log_pos=<span class="number">154</span>;                    <span class="comment"># 这个值修改为前面主服务器的 Position 值</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动复制功能</span></span><br><span class="line"><span class="keyword">start</span> <span class="keyword">slave</span>;</span><br></pre></td></tr></table></figure><h3 id="查看主从状态"><a href="#查看主从状态" class="headerlink" title="查看主从状态"></a>查看主从状态</h3><p>到此已经配置成功了，我们需要在两个从服务器上执行以下 SQL 查看是否成功</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">slave</span> <span class="keyword">status</span>;</span><br></pre></td></tr></table></figure><p>成功时以下两项都为 Yes ：</p><p><img src="https://ws3.sinaimg.cn/large/005BYqpgly1fxvvp0p3b7j30f0038wei.jpg" alt=""></p><p>到此就配置完成了，现在我们向主服务器上的所有写操作都会自动同步到从服务器上。</p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>配置完之后，在主服务器上新建数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> test_master_slave</span><br></pre></td></tr></table></figure><p>然后到两个从服务器上查看会发现同样都有这个数据库：</p><p><img src="https://ws3.sinaimg.cn/large/005BYqpgly1fxvvpn7j47j30bw0nyguu.jpg" alt=""></p><h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><p>接下来我们需要安装并配置一个负载均衡服务器，对两台从服务器进行请求的转发。</p><h3 id="拉取haproxy镜像"><a href="#拉取haproxy镜像" class="headerlink" title="拉取haproxy镜像"></a>拉取haproxy镜像</h3><p>首先我们要下载 haproxy 的镜像：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull haproxy:1.5.19-alpine</span><br></pre></td></tr></table></figure><h3 id="运行容器"><a href="#运行容器" class="headerlink" title="运行容器"></a>运行容器</h3><p>创建负载均衡容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name haproxy -d -p 13333:3306 --link mysql13307:mysql1 --link mysql13308:mysql2 haproxy:1.5.19-alpine</span><br></pre></td></tr></table></figure><p>创建之后，发现该容器无法启动，这是因为我们还没有为它编写好配置文件，所以我们需要编写负载均衡配置文件。</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>先在本机中创建一个配置文件，文件名为 haproxy.cfg 。</p><p>1、编写配置文件</p><p>haproxy.cfg</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">global</span><br><span class="line">daemon</span><br><span class="line">nbproc 1</span><br><span class="line">pidfile /usr/local/haproxy/conf/haproxy.pid</span><br><span class="line"></span><br><span class="line">defaults</span><br><span class="line">mode tcp</span><br><span class="line">retries 2</span><br><span class="line">option redispatch</span><br><span class="line">option abortonclose</span><br><span class="line">maxconn 4096</span><br><span class="line"></span><br><span class="line">listen test1</span><br><span class="line">bind 0.0.0.0:3306         # 监听的端口号</span><br><span class="line">mode tcp                  # 负载均衡时使用的协议  tcp(数据库)     http(web服务器)</span><br><span class="line">server s1 mysql1:3306     # 配置后端要转发服务器</span><br><span class="line">server s2 mysql2:3306</span><br></pre></td></tr></table></figure><p>2、复制配置文件到容器中</p><p>编写好配置文件之后，我们需要把配置文件复制到容器中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp 本地路径/haproxy.cfg  haproxy:/usr/local/etc/haproxy/haproxy.cfg</span><br></pre></td></tr></table></figure><p>3、启动容器</p><p>有了配置文件之后，我们就可以启动负载均衡的容器了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker start haproxy</span><br></pre></td></tr></table></figure><p>现在就可以通过 <code>127.0.0.1:13333</code> 端口连接负载均衡了。</p><h2 id="Laravel-中配置主从"><a href="#Laravel-中配置主从" class="headerlink" title="Laravel 中配置主从"></a>Laravel 中配置主从</h2><p>接下来，我们将京西商城的 api 接口项目和数据库集群结合实现程序上的 <code>读、写分离</code>。</p><p>1、导入商城数据库</p><p>在主服务器上创建 jxshop 商城，并将项目中的 jxshop.sql 到主服务器执行一遍以导入商城数据库结构。</p><p>2、修改 Laravel 中的配置文件</p><p>在 mysql 中添加 read 和 write 两个数组，在这两个数组中分别设置读、写服务器的账号信息，相同的配置项可以写到数组的外面。</p><p>config/database.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'mysql'</span> =&gt; [</span><br><span class="line">    <span class="string">'read'</span> =&gt; [</span><br><span class="line">        <span class="string">'port'</span> =&gt; <span class="string">'13307'</span>,</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">'write'</span> =&gt; [</span><br><span class="line">        <span class="string">'port'</span> =&gt; <span class="string">'13306'</span>,</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">'driver'</span> =&gt; <span class="string">'mysql'</span>,</span><br><span class="line">    <span class="string">'host'</span> =&gt; env(<span class="string">'DB_HOST'</span>, <span class="string">'127.0.0.1'</span>),</span><br><span class="line">    <span class="comment">// 'port' =&gt; env('DB_PORT', '3306'),</span></span><br><span class="line">    <span class="string">'database'</span> =&gt; env(<span class="string">'DB_DATABASE'</span>, <span class="string">'forge'</span>),</span><br><span class="line">    <span class="string">'username'</span> =&gt; env(<span class="string">'DB_USERNAME'</span>, <span class="string">'forge'</span>),</span><br><span class="line">    <span class="string">'password'</span> =&gt; <span class="number">123123</span>,</span><br><span class="line">    <span class="string">'unix_socket'</span> =&gt; env(<span class="string">'DB_SOCKET'</span>, <span class="string">''</span>),</span><br><span class="line">    <span class="string">'charset'</span> =&gt; <span class="string">'utf8mb4'</span>,</span><br><span class="line">    <span class="string">'collation'</span> =&gt; <span class="string">'utf8mb4_unicode_ci'</span>,</span><br><span class="line">    <span class="string">'prefix'</span> =&gt; <span class="string">''</span>,</span><br><span class="line">    <span class="string">'prefix_indexes'</span> =&gt; <span class="keyword">true</span>,</span><br><span class="line">    <span class="string">'strict'</span> =&gt; <span class="keyword">true</span>,</span><br><span class="line">    <span class="string">'engine'</span> =&gt; <span class="keyword">null</span>,</span><br><span class="line">],</span><br></pre></td></tr></table></figure><blockquote><p>[mark] (参考自我的上课讲义)  未完待续！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>集群的介绍</title>
      <link href="/2018/12/04/docker-colony/"/>
      <url>/2018/12/04/docker-colony/</url>
      
        <content type="html"><![CDATA[<h3 id="集群的进化"><a href="#集群的进化" class="headerlink" title="集群的进化"></a>集群的进化</h3><p><strong>阶段一、起步</strong><br>刚开始时，网站流量比较小，所有的软件都安装在一台服务器：</p><a id="more"></a><p><img src="https://ws3.sinaimg.cn/large/005BYqpgly1fxuzwac2vsj30si0eejt0.jpg" alt=""><br><strong>阶段二、拆分</strong><br>流量大了，一台电脑无法支撑，所以我们需要把每个服务单独放在一台服务器上，以提高网站的吞吐量：<br><img src="https://ws3.sinaimg.cn/large/005BYqpgly1fxuzx2gf25j31do07a75v.jpg" alt=""><br><strong>阶段三、横向扩展</strong><br>流量更大时，发现即使每个服务用一台电脑也是不够用的，这时我们需要 <code>横向扩展</code> 每种服务需要用到的服务器：<br><img src="https://ws3.sinaimg.cn/large/005BYqpgly1fxuzxilrqpj31d40f441o.jpg" alt=""><br>Nginx、PHP这些服务提供的服务完全是一样的，在扩展时只需要简单的添加更多的服务器即可，而 MySQL、Redis 这些保存数据的服务不能通过简单的添加服务器来扩展，还要考虑到多台服务器的数据同步问题，后面再详细介绍。<br><strong>阶段四、拆分功能模块</strong><br>当流量再大时，我们发现只是简单的拆分服务器已不能满足要求，这时我们需要再往细了拆分：<code>拆分功能模块</code>，每个功能单独放到一个集群上，这就是目前非常流行的 <code>微服务</code>。<br><img src="https://ws3.sinaimg.cn/large/005BYqpgly1fxuzy409hwj318w0fgwh9.jpg" alt=""></p><h3 id="技术介绍"><a href="#技术介绍" class="headerlink" title="技术介绍"></a>技术介绍</h3><p><strong>负载均衡（Load Balance）</strong></p><p>将请求<code>转发</code>给任一后端服务器。</p><p>转发策略：负载均衡有多种转发策略，常用的有轮询、加权轮询等方法</p><p>健康检查：通过 <code>心跳</code> 机制检查后端服务器是否正常运行，如果某台服务器宕机就不再向这台服务器发送请求。</p><p>软件：实现负载均衡常用的软件有lvs、haproxy、nginx 等。<br><img src="https://ws3.sinaimg.cn/large/005BYqpgly1fxuzyl027tj30xq0j2di5.jpg" alt=""></p><p><strong>高可用（High Availiablity</strong></p><p>高可用：系统能够一直提供稳定的服务，即使服务器出现宕机的情况。</p><p>很多公司的高可用目标是4个9，也就是99.99%，这就意味着，系统的年停机时间为8.76个小时。</p><p>服务器宕机是不可避免的情况，那么我们如何才能保存系统在有机器宕机时依然能够提供服务呢？</p><p>实现高可用的原理非常简单：<code>提供一个备份服务器，当工作服务器宕机时，备份服务器马上替代上</code>。</p><p>比如上面负载均衡图框架中的负载均衡服务器就存在 <code>单点故障</code> 问题，就是说如果负载均衡服务器宕机了，那么整个系统就无法访问了，所以为了解决单点故障我们需要为负载均衡服务器添加一个备份服务器：</p><p><img src="https://ws3.sinaimg.cn/large/005BYqpgly1fxuzz5evp3j30ya0kqdiu.jpg" alt=""></p><p>常用实现高可用的软件有：<code>keepalived</code> 、<code>heartbeat</code> 等。</p><p><strong>SESSION 共享</strong></p><p>由于 SESSION 的原理是在服务器上保存数据，这就会导致在集群环境下出现  <code>SESSION 丢失</code> 的问题，这是因为在有负载均衡的集群环境中，每次请求的后端服务器可能是不同的，我们在保存 SESSION 时可能保存到了 a 服务器上，而在负载均衡轮询到其它服务器时无法读取到 SESSION 数据。</p><p><img src="https://ws3.sinaimg.cn/large/005BYqpgly1fxuzzmyyapj30yo0kan0c.jpg" alt=""></p><p>由于 SESSION 是保存在第三台服务器上的，所以当负载均衡把请求转发给另外两台服务器时就会出现获取不到 SESSION 的情况。</p><p>解决 SESSION 丢失有两种办法：</p><p>1、 SESSION 共享</p><p>将 SESSION 保存到 Redis 或者数据库中以实现共享，由于 SESSION 的使用比较频繁所以还是放在 Redis 中最好：</p><p><img src="https://ws3.sinaimg.cn/large/005BYqpgly1fxv00lalenj31ce0k6gq6.jpg" alt=""></p><p>2、IP HASH</p><p>另一个方法是修改负载均衡的转发策略，不要使用轮询的方式，而是使用IP HASH的方式，这种方式会根据用户的IP进行HASH运算然后计算出对应的后端服务器，以后这个IP发送的所有请求都转发同这台服务器上，这样同一个用户每次访问的是同一个后台服务器，这样就可以正常使用 SESSION 了。</p><p><img src="https://ws3.sinaimg.cn/large/005BYqpgly1fxv014cin9j30wg0l6gos.jpg" alt=""></p><p><strong>反向代理</strong></p><p>反向代理服务器相当于是一个缓存服务器。</p><p>用户首先访问反向代理服务器，如果在服务器有要访问的数据的缓存数据并且没有过期就直接返回给用户，如果没有缓存数据就替用户到后端去取数据，取到数据之后缓存到本地，然后返回给用户，下次再有人访问同样的数据时直接返回缓存数据。</p><p>这种服务器常用来缓存网站中静态页面，比如：新闻详情、小说详情等不经常更新的页面。</p><p><img src="https://ws3.sinaimg.cn/large/005BYqpgly1fxv01lebcmj311q0bg0ty.jpg" alt=""></p><p>常用软件：varnish（推荐）、squid。</p><p><strong>CDN</strong></p><p>CDN：内容分发网络，和反向代理类似，只不过，CDN是把数据缓存在世界各地的服务器节点上，当用户访问数据时会从离他最近的服务器节点上去找，比较适用于静态资源的地域优化。比如：图片、新闻、视频、直播、音乐等。</p><p><img src="https://ws3.sinaimg.cn/large/005BYqpgly1fxv02mq1npj31mm0u07wj.jpg" alt=""></p><h3 id="数据库集群"><a href="#数据库集群" class="headerlink" title="数据库集群"></a>数据库集群</h3><p>数据库的集群不能通过简单的扩展服务器来实现，因为数据库在集群时要考虑数据的同步、事务一致性等问题。常用的数据库集群方案有：<br>1、主、从复制<br>2、分库、分表<br>3、PXC 集群</p><h4 id="主、从复制"><a href="#主、从复制" class="headerlink" title="主、从复制"></a>主、从复制</h4><p>MySQL 自带主从复制。</p><p><strong>一主多从</strong></p><p>适用于：读操作比较多，写操作比较少。</p><p>一个集群中只能有一个主服务器，可以有多个从服务器，对主服务器上的所有写操作都会自动同步到从服务器上：</p><p><img src="https://ws3.sinaimg.cn/large/005BYqpgly1fxv036r4uwj30nw0f4400.jpg" alt=""></p><p><strong>工作原理</strong><br>主服务器会将所有写操作记录到  <code>binlog（二进制日志）</code> 中，然后从服务器会从主服务器读取这个 binlog，然后在从服务器上把 binlog 中的内容重放一遍以实现数据的同步。</p><p><img src="https://ws3.sinaimg.cn/large/005BYqpgly1fxv03peck3j30wq0j6af1.jpg" alt=""></p><p><strong>读写分离</strong><br>在主从复制这种架构的基础上，我们的程序就可以实现 <code>读写分离</code> 来提供网站的性能。</p><p>读写分离：指所有的定操作都到主服务器上去执行，所有的读操作都到从服务器上去执行，这样可以在不同的服务器上执行不同的操作，以分担单台服务器的压力（注意这里主服务器存在单点故障问题，如果要解决这个问题，我们就需要实现 MySQL 主服务器的双机热备）。</p><p><img src="https://ws3.sinaimg.cn/large/005BYqpgly1fxv04ce9gdj313o0kqdj9.jpg" alt=""></p><p><strong>多主多从</strong></p><p>当网站写压力比较大时，我们就需要多台主服务器来分担负载，然后让它们互为主从这样就可以同步数据了，这时我们可以搭建以下结构的 MySQL 集群：</p><p><img src="https://ws3.sinaimg.cn/large/005BYqpgly1fxv050hsp5j31ce0l20vj.jpg" alt=""></p><p><strong>跨地址同步数据存在的问题：数据延迟</strong><br>由于主从复制是异步执行的，复制数据时根据系统负载、网络等多方面原因会出现从服务器复制数据的延迟问题，这就会导致新插入的数据无法马上读取的情况，这对于一些对数据一致性要求比较高的系统是无法接受的。比如，我刚刚下了一个订单并且支付成功了，可系统却一直显示未支付，此时用户一定会心慌慌担心自己的钱被骗了。</p><p>解决办法：<br>1、使用 PXC 集群：PXC是一种 <code>强一致性</code> 的集群，在向一个节点插入数据时，PXC会先将这个数据同时插入到所有其它节点上去，在其它节点没有插入成功时就一直阻塞等待，直至所有其它节点都写入成功了，才会显示插入成功，否则显示插入失败。这种集群对于一些和钱相关的系统来说是很有用的。当然有利就有弊，PXC的集群的缺点就是速度慢，对强一致性要求高的场景，主要跟钱相关。</p><p>2、使用缓存服务器来减少延迟：为了即保存一致性又能保证性能，我们可以使用缓存服务器（比如 Redis ）来暂时存储数据以减少延迟。</p><p>写数据时：同时向数据库和 Redis 中写入</p><p><img src="https://ws3.sinaimg.cn/large/005BYqpgly1fxv05hdqeaj30o00fi75x.jpg" alt=""></p><p>读数据时：先到数据库中读，如果数据库中没有再到 Redis 中读，如果 Redis 中也没有就是真的没有</p><p><img src="https://ws3.sinaimg.cn/large/005BYqpgly1fxv05ycy3gj30r00iaacp.jpg" alt=""></p><p>3、淘宝出的 canal</p><h3 id="分库、分表"><a href="#分库、分表" class="headerlink" title="分库、分表"></a>分库、分表</h3><p>分库：将一个数据库分成多个数据库。</p><p>分表：将一张表分成多张表。</p><h4 id="分库"><a href="#分库" class="headerlink" title="分库"></a>分库</h4><p>当网站的访问量非常大时，我们为了提高数据的性能，我们需要将数据库根据业务逻辑拆分成多个库，然后就可以放到不同的集群上：</p><p><img src="https://ws3.sinaimg.cn/large/005BYqpgly1fxv06iyo66j30ys0s0ae3.jpg" alt=""></p><p>在分库之后要尽量避免跨库操作，所以我们在分库时，应该把需要连表操作的表放到一个库中，比如订单表和订单商品表。如果实在需要跨库联表操作时，我们就得使用程序拆分 SQL 语句分别查询。</p><h4 id="分表"><a href="#分表" class="headerlink" title="分表"></a>分表</h4><p>我们在项目中应该避免出现 <code>大表</code>。</p><p>当一个表非常大的时，对这个表进行的操作都将消耗大量的时间，操作这样的表简直就是恶梦！</p><p>什么样的表算大表呢？</p><p>一般的标准是：</p><p>1、表中的记录数超过 2千万</p><p>2、数据文件超过 10 G</p><p>这个没有统一的标准，不同的表结构，不同的硬件对大表的定义都不同，所以要灵活定义。</p><p>为了避免出现大表的情况，我们可以使用 <code>分表</code> 的技术。</p><p>分表：把一张表中的数据分拆到多张表中。</p><p><img src="https://ws3.sinaimg.cn/large/005BYqpgly1fxv06zrp3dj310y0h60tn.jpg" alt=""></p><p>分表分为<code>横向分表</code> 和 <code>纵向分表</code> 两种：</p><ul><li><p>横向分表：当表中数据量比较大时，将数据保存到多个表中。</p></li><li><p><img src="https://ws3.sinaimg.cn/large/005BYqpgly1fxv07khlyej311k0jygnc.jpg" alt="">纵向分表：当表中字段比较多时，就可以将常用的字段，和不常用的字段分到多个表中。</p></li></ul><p>原则：常用的字段一个表（热数据），不常用的另一个表（冷数据）</p><p><img src="https://ws3.sinaimg.cn/large/005BYqpgly1fxv081y0kpj311e0gsmzg.jpg" alt=""></p><h3 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h3><p>在分库、分表的架构中，对于数据的操作比较复杂，比如，在添加数据时，我们要计算数据应该插入到哪个库的哪个表中，要查询数据时还要考虑跨库、跨表的查询、排序、合并等问题。如果这些工作都由我们自己编码来实现，那么难度是非常大的。这时我们可以使用一些中间件来帮助我们简化开发。</p><p>常用的中间件有：</p><p>1、MyCat</p><p>2、OneProxy</p><p>3、ProxySQL</p><p>4、Atlas</p><blockquote><p>[mark] (参考自我的上课讲义)  未完待续！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker入门并搭建PHP（LNMP）运行环境</title>
      <link href="/2018/12/03/docker-1/"/>
      <url>/2018/12/03/docker-1/</url>
      
        <content type="html"><![CDATA[<h2 id="Docker的简单介绍"><a href="#Docker的简单介绍" class="headerlink" title="Docker的简单介绍"></a>Docker的简单介绍</h2><h3 id="1、docker是什么？"><a href="#1、docker是什么？" class="headerlink" title="1、docker是什么？"></a>1、docker是什么？</h3><p>docker 是一个开源的应用容器引擎，基于Go语言实现，属于操作系统层面的虚拟技术。</p><p>docker可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何安装有docker的电脑上。</p><p>容器是完全使用沙盒机制，相互之间不会有任何接口（类似 iphone 的 app），更重要的是容器性能开销较低</p><p><img src="https://ws3.sinaimg.cn/large/005BYqpgly1fxtm2k4s07j30pu09zwgk.jpg" alt=""></p><a id="more"></a><h3 id="2、docker能够做什么？"><a href="#2、docker能够做什么？" class="headerlink" title="2、docker能够做什么？"></a>2、docker能够做什么？</h3><p>docker可以解决虚拟机能够解决的问题，同时也能够解决虚拟机由于电脑资源要求过高而无法解决的问题</p><p><img src="https://ws3.sinaimg.cn/large/005BYqpgly1fxtm3ejhpgj30ma0dpgoh.jpg" alt=""></p><p><img src="https://ws3.sinaimg.cn/large/005BYqpgly1fxtm3tnd9mj30lt0awmz1.jpg" alt=""></p><h3 id="3、为什么使用docker"><a href="#3、为什么使用docker" class="headerlink" title="3、为什么使用docker"></a>3、为什么使用docker</h3><p><strong>1更快速的交付和部署</strong><br>对开发和运维员来说，最希望的就是一次创建或配置，可以在任意地方正常运行。</p><p>例如：开发者可以使用一个标准的镜像来构建一套开发容器，开发完成之后，运维人员可以直接使用这个容器来部署代码。Docker 容器很轻很快！容器的启动时间是秒级的，大量地节约开发、测试、部署的时间。节约安装各种开发环境的软件的时间。解决开发环境和生产环境不一致的问题。</p><p><strong>2、更轻松的迁移和扩展：</strong><br>Docker 容器几乎可以在任意的平台上运行，包括物理机、虚拟机、公有云、私有云、个人电脑、服务器等。 这种兼容性可以让用户把一个应用程序从一个平台直接迁移到另外一个。</p><p><strong>3、更高的资源利用率：</strong><br>Docker 是<code>容器技术</code>，和虚拟机非常像，都可以在主机上隔离出多个独立的子系统，它们最大的区别在于虚拟机是从主机中完全隔离出一个系统来，而容器技术和主机是共享系统内核的。因为这些Docker 对系统资源的利用率很高，一台主机上可以同时运行数千个 Docker 容器。容器除了运行其中应用外，基本不消耗额外的系统资源，使得应用的性能很高，同时系统的开销尽量小。传统虚拟机方式运行 10 个不同的应用就要起 10 个虚拟机，而Docker 只需要启动 10 个隔离的应用容器即可。</p><p><strong>总结：</strong><br>Docker背后的想法是创建软件程序可移植的轻量级容器，让其可以在任何安装了Docker的机器上运行，并不用关心底层操作系统，就像野心勃勃的造船者们成功创建了集装箱而不需要考虑装在哪种船舶上一样。</p><p><strong>只有一个共同目标：简化部署流程，提高生产力！</strong> </p><h3 id="4、Docker快速体验-wordpress搭建"><a href="#4、Docker快速体验-wordpress搭建" class="headerlink" title="4、Docker快速体验-wordpress搭建"></a>4、Docker快速体验-wordpress搭建</h3><p>WordPress是使用PHP语言开发的博客平台，用户可以在支持PHP和MySQL数据库的服务器上架设属于自己的网站。也可以把 WordPress当作一个内容管理系统（CMS）来使用。<br>wordpress的运行环境已经全部打包好了,同时wordpress也被打包进去了，所以紧紧几个命令就可以搞定了。<br><strong>首先下载mysql</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql:<span class="number">5.7</span></span><br></pre></td></tr></table></figure><p>*<em>下载wordpress镜像 *</em></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull wordpress</span><br></pre></td></tr></table></figure><p>*<em>安装MySQL容器 *</em></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name mysql -e MYSQL_ROOT_PASSWORD=admin -p <span class="number">3306</span>:<span class="number">3306</span> -d mysql:<span class="number">5.7</span></span><br></pre></td></tr></table></figure><p><strong>安装wordpress</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd --name wordpress -e WORDPRESS_DB_HOST=mysql -e WORDPRESS_DB_PASSWORD=admin -p <span class="number">8080</span>:<span class="number">80</span>  --link  mysql:mysql -d wordpress</span><br></pre></td></tr></table></figure><p>*<em>访问wordpress *</em></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">localhost:<span class="number">8080</span>或者<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8080</span></span><br></pre></td></tr></table></figure><h3 id="5、docker-项目架构"><a href="#5、docker-项目架构" class="headerlink" title="5、docker 项目架构"></a>5、docker 项目架构</h3><p>如果我们相对docker有个深入的理解我们必须先认识docker的项目架构</p><p>Docker使用C/S架构，通过docker客户端连接到Docker服务器上从而管理Docker服务器里面的镜像和容器，类似于git的架构。      </p><p><img src="https://ws3.sinaimg.cn/large/005BYqpgly1fxtm4t35stj30j30ai0wh.jpg" alt=""></p><h3 id="6、Docker的基本概念"><a href="#6、Docker的基本概念" class="headerlink" title="6、Docker的基本概念"></a>6、Docker的基本概念</h3><p><strong>镜像（images）</strong><br>Docker 镜像（Image）就是一个只读的模板。例如：一个镜像可以包含一个完整的操作系统环境，里面仅安装了 Apache 或用户需要的其它应用程序。镜像可以用来创建 Docker 容器，一个镜像可以创建很多容器。Docker 提供了一个很简单的机制来创建镜像或者更新现有的镜像，用户甚至可以直接从其他人那里下载一个已经做好的镜像来<br>直接使用。</p><p><strong>容器（Conrainer）</strong><br>Docker 利用容器（Container）来运行应用。容器是从镜像创建的运行实例。它可以被启动、开始、停止、删除。每个容器都是相互隔离的、保证安全的平台。可以把容器看做是一个易版的 Linux 环境（包括root用户权限、进程空间、用户空间和网络空间等）和运行在其中的应用程序。</p><p>文件系统隔离技术使得Docker成为了一个非常有潜力的虚拟化技术。在容器中可以对文件进行修改、删除、创建。</p><p><strong>仓库（Registry）</strong><br>仓库（Repository）是集中存放镜像文件的场所。有时候会把仓库和仓库注册服务器（Registry）混为一谈，并不严格区分。实际上，仓库注册服务器上往往存放着多个仓库，每个仓库中又包含了多个镜像，每个镜像有不同的标签（tag）。</p><p>仓库分为公开仓库（Public）和私有仓库（Private）两种形式。最大的公开仓库是 Docker Hub，存放了数量庞大的镜像供用户下载。国内的公开仓库包括 时速云 、网易云 等，可以提供大陆用户更稳定快速的访问。当然，用户也可以在本地网络内创建一个私有仓库。</p><p>当用户创建了自己的镜像之后就可以使用 push 命令将它上传到公有或者私有仓库，这样下次在另外一台机器上使用这个镜像时候，只需要从仓库上 pull 下来就可以了。Docker  仓库的概念跟  Git  类似，注册服务器可以理解为GitHub 这样的托管服务。</p><p><strong>Dockerfile</strong><br><code>Dockerfile</code> 是一个文本文件，其内包含了一条条的<code>指令</code>(Instruction)，每一条指令构建一层，因此每一条指令的内容，就是描述该层应当如何构建。<br>一般用来定制镜像</p><h2 id="Docker常用的指令和参数"><a href="#Docker常用的指令和参数" class="headerlink" title="Docker常用的指令和参数"></a>Docker常用的指令和参数</h2><p>一般我们都是用指令操作来操作docker的</p><h3 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h3><table><thead><tr><th>指令</th><th>说明</th></tr></thead><tbody><tr><td>docker images</td><td>查看已下载的镜像</td></tr><tr><td>docker rmi 镜像名称:标签名</td><td>删除已下载的镜像</td></tr><tr><td>docker search 镜像</td><td>从官方仓库（hub.docker.com）查找镜像</td></tr><tr><td>docker pull 镜像名称:标签名</td><td>标签名默认是 latest，代表最新版本。</td></tr><tr><td>docker run</td><td>创建容器</td></tr><tr><td>docker ps</td><td>列出运行中的容器（运行中）</td></tr><tr><td>docker ps -a</td><td>列出未运行的容器</td></tr><tr><td>docker rm 容器名称</td><td>删除停止的容器</td></tr><tr><td>docker rm -f 容器名称</td><td>删除运行中的容器</td></tr><tr><td>docker start 容器名称</td><td>启动容器</td></tr><tr><td>docker stop 容器名称</td><td>停止容器</td></tr><tr><td>docker restart 容器名称</td><td>重启容器</td></tr><tr><td>docker exec</td><td>执行容器中的指令</td></tr><tr><td>### 常用参数</td><td></td></tr><tr><td>下载了镜像之后，我们就可以通过镜像来创建容器，创建容器时常用的参数是：</td><td></td></tr><tr><td><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name 容器名称 -d -p 主机端口:容器内端口 -e 环境变量 --link 其它容器名:容器中别名 镜像名称:标签名</span><br></pre></td></tr></table></figure></td><td></td></tr></tbody></table><p>参数说明：</p><ul><li><p>–name：指定容器名称</p></li><li><p>-d：容器在后台运行</p></li><li><p>-p：绑定端口号，容器内部的端口号无法在外部访问，必须经过绑定之后才可以访问</p></li><li><p>–link：连接其它容器，当要访问其它容器中的内容时，需要先链接才可以使用</p></li><li><p>-e：设置容器中的环境变量</p><h2 id="Docker的常用操作"><a href="#Docker的常用操作" class="headerlink" title="Docker的常用操作"></a>Docker的常用操作</h2><h3 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a>创建容器</h3><p>创建一个 MySQL 容器，密码是123456，绑定本地 33306 端口到容器中 3306 端口：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name mysql01 -d -p 33306:3306 -e MYSQL_ROOT_PASSWORD=123456 mysql:5.7</span><br></pre></td></tr></table></figure><p>说明：MYSQL_ROOT_PASSWORD 环境变量用来设置这个容器中 MySQL 的密码</p></li></ul><p>创建之后，会启动这个容器，如果启动成功，就可以使用 <code>docker ps</code> 指令查看到：</p><p>启动之后，这个容器内部就运行了 MySQL 服务器，在容器内部监听的是 3306 端口，我们已经将这个端口绑定到了主机的 33306 端口上，所以我们在主机上可以使用 33306 端口连接</p><h3 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h3><p>有时我们需要进入到一个容器内部去操作这个容器，这时我们可以使用 <code>docker exec</code> 指令来实现。</p><p>docker exec 指令可以执行一个运行着的容器中的命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it 容器名称 命令</span><br></pre></td></tr></table></figure><p>我们可以通过执行 <code>bash</code> 指令进入容器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it mysql01 bash</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it mysql01 /bin/sh</span><br></pre></td></tr></table></figure><p>-it：以实时交互的形式运行（和 -d 正好相反）</p><p>执行之后就进入到了容器中，然后我们输入的命令是在容器中执行的</p><p>执行 <code>exit</code> 指令可以退出容器。</p><h3 id="链接容器"><a href="#链接容器" class="headerlink" title="链接容器"></a>链接容器</h3><p>Docker 推荐我们一个容器中只运行一个主要的应用程序，比如，我们要运行一个 PHP + MySQL 的程序，那么我们应该把 PHP 和 MySQL 放到两个容器中</p><p>默认情况下，容器之间是不能直接通信的，如果要通信必须在创建 PHP 容器时使用 <code>--link</code> 参数建立和 MySQL 容器的链接</p><p>建立连接的参数说明：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--link 要连接的容器的名称 : 别名</span><br></pre></td></tr></table></figure><p>在容器中可以使用别名来访问连接的容器。</p><p>比如，我们现在运行了一个叫做 <code>mysql01</code> 的容器，现在我们要创建一个 PHP 容器并和 MySQL 容器建立链接，指令应该是：</p><p>创建一个 PHP 容器，并且设置和 mysql01 容器建立连接，在 PHP 容器中连接的别名是 mysql</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name php01 -d --link mysql01:mysql  php</span><br></pre></td></tr></table></figure><p>创建了链接之后，就可以在容器中使用别名来通信了：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 连接 mysql01 容器中的 MySQL 服务器</span></span><br><span class="line">$pdo = <span class="keyword">new</span> PDO(<span class="string">'mysql:host=mysql:33306;dbname=xxx'</span>, <span class="string">'root'</span>, <span class="string">'123456'</span>)</span><br></pre></td></tr></table></figure><p>扩展：我们可以同时添加多个 –link 来同时连接多个容器，比如同时连接mysq01和redis01两个容器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name php01 -d --link mysql01:mysql --link redis01:redis php</span><br></pre></td></tr></table></figure><h3 id="挂载硬盘"><a href="#挂载硬盘" class="headerlink" title="挂载硬盘"></a>挂载硬盘</h3><p>问题一、数据是保存在容器里的，如果容器删除了数据也就删除了。</p><p>问题二、每次要修改容器时，必须要进入到容器中去修改，比如要修改my.cnf。</p><p>为了能够保存（持久化）数据以及共享容器间的数据，Docker 提出了 Volume 的概念。</p><p>可以使用 <code>-v</code> 这个参数，将容器中的一个目录或者文件 和主机上的目录和文件进行绑定，绑定之后，修改主机上的这个文件就相当于修改了容器中的文件，删除容器之后，绑定的目录和文件还在主机（不会被删除）。</p><p>为了实现主机和容器之间的数据共享，我们可以在创建容器时添加 <code>-v</code> 参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run ... -v 主机目录:容器中的目录 ...</span><br></pre></td></tr></table></figure><p>示例：创建 mysql 容器并将数据目录挂载到主机：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name mysql02 -d -v /home/home/code/docker-volume-data/testmysql:/var/lib/mysql -p 33307:3306 -e MYSQL_ROOT_PASSWORD=123456 mysql:5.7.24</span><br></pre></td></tr></table></figure><p>示例：启动一个 Nginx 服务器并将 nginx 的主目录搭载到主机上</p><p>1、下载 nginx</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull nginx:1.14.1-alpine</span><br></pre></td></tr></table></figure><p>2、到容器中查看网站根目录的路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run --name testnginx -d nginx:1.14.1-alpine   ## 创建容器</span><br><span class="line">docker exec -it testnginx /bin/sh                    ## 进入容器</span><br></pre></td></tr></table></figure><p>在容器中使用 vi 编辑器查看配置文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/nginx/conf.d/default.conf</span><br></pre></td></tr></table></figure><p>查看网站根目录是 <code>usr/share/nginx/html</code>。</p><p>删除该容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm -f testnginx</span><br></pre></td></tr></table></figure><p>3、创建 nginx 容器并将 <code>/usr/share/nginx/html</code> 挂载到本地</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name nginx01 -d -p 30080:80 -v 本地目录:/usr/share/nginx/html nginx.1.14.1-alpine</span><br></pre></td></tr></table></figure><h3 id="复制文件"><a href="#复制文件" class="headerlink" title="复制文件"></a>复制文件</h3><p>我们可以使用 <code>docker cp</code> 指令向容器中复制文件，或者从容器中复制文件到主机。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp 源目录  目标目录</span><br></pre></td></tr></table></figure><ul><li>复制主机文件到容器<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp C:/my.cnf mysql01:/etc/mysql/my.cnf</span><br></pre></td></tr></table></figure></li><li>从容器复制文件到主机<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp  mysql01:/etc/mysql/my.cnf C:/my.cnf</span><br></pre></td></tr></table></figure></li></ul><h2 id="使用-Docker-搭建-LNMP-环境"><a href="#使用-Docker-搭建-LNMP-环境" class="headerlink" title="使用 Docker 搭建 LNMP 环境"></a>使用 Docker 搭建 LNMP 环境</h2><p>平时在做开发时，为了简单、方便常用以下开发环境：<br>1、WAMP<br>2、Visual AMP\NMP<br>3、PHP 内置 WEB 服务器，如 <code>php -S localhost:9999 -t</code> 还有 Laravel 中的 <code>php artisan serve --port 801</code> 。<br>以上这三种只适用于开发时使用，在真正的线上环境我们需要安装更加稳定并且能够支撑高并发的运行环境，目前 PHP 的生产环境最常用的就是 <code>LNMP</code>。</p><p><strong>LNMP：Linux + Nginx + MySQL + PHP</strong></p><h3 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h3><p>Nginx 是目前最流行的高性能、高并发的开源、免费的 WEB 服务器，俄罗斯人开发的。</p><p>Nginx 使用 Linux 中最流行的 <code>epoll</code> 做为事件处理机制，并且 Nginx 在运行时只消耗极少的系统资源，所以可以轻松实现上万的并发请求，Nginx 除了可以做为 WEB 服务器之外，还可以做为Email、反向代理、负载均衡、流媒体等服务器。<br>Nginx 和其它脚本语言（如PHP）一起工作时一般使用 FastCGI 机制。</p><h3 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h3><p><strong>方案一、一个容器中同时运行 nginx php-mpm</strong><br>​    好处：简单、方便<br>​    缺点：不利于每个软件的横向扩展<br><strong>方案二、把 nginx、php-fpm、MySQL 分别放到三个容器中</strong><br>​    好处：有利于单独扩展每个系统<br>​    缺点：部署相对复杂<br>我选择的是方案二</p><h3 id="LNMP-模型图"><a href="#LNMP-模型图" class="headerlink" title="LNMP 模型图"></a>LNMP 模型图</h3><p>创建三个容器：Nginx、PHP-FPM、MySQL，它们之间的关系是：<br>（说明：图中端口可以任意修改）<br><img src="https://ws3.sinaimg.cn/large/005BYqpgly1fxtma9px91j31es088my0.jpg" alt=""></p><p>总结：Nginx 负载处理静态文件，如果用户访问的是 PHP 文件，就转发给 PHP 服务器的9000来处理，PHP服务器处理完之后，把结果返回给 nginx,然后nginx再返回给前端。</p><p><strong>1、下载镜像</strong></p><p>下载 nginx 镜像（alpine版的更小）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull nginx:1.14-1-alpine</span><br></pre></td></tr></table></figure><p>下载 MySQL 镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql:5.7</span><br></pre></td></tr></table></figure><p>下载 PHP-FPM 镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull php:7.2-fpm-alpine</span><br></pre></td></tr></table></figure><p><strong>2、创建容器</strong></p><p>我们创建三个容器 Nginx、PHP-FPM、MySQL，这里需要注意的是它们创建的顺序：</p><p>MySQL =&gt; PHP-FPM =&gt; Nginx</p><p>创建 MySQL 容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name mysql01 -d -p 33306:3306 -e MYSQL_ROOT_PASSWORD=123456 mysql:5.7</span><br></pre></td></tr></table></figure><p>创建 php 容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name phpfpm7.2 -d --link mysql01:mysql php:7.2-fpm-alpine</span><br></pre></td></tr></table></figure><p>创建 nginx 容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name nginx -d -p 8988:80 --link phpfpm7.2:php nginx:1.14.1-alpine</span><br></pre></td></tr></table></figure><p>3、配置 Nginx<br>Nginx 只能对静态文件（html，css，js，图片等）进行处理，无法处理动态文件（php、python等），我们需要配置 nginx 将动态脚本转发给 PHP 服务器。<br>a. 进入 nginx 容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it nginx /bin/sh</span><br></pre></td></tr></table></figure><p>b、查找配置文件位置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -name nginx.conf</span><br></pre></td></tr></table></figure><p>c、修改 Nginx 的配置文件<br>/etc/nginx/conf.d/default.conf</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    ...</span><br><span class="line">    location / &#123;</span><br><span class="line">        root   /usr/share/nginx/html;    # 网站根目录</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">    location ~ \.php$ &#123; </span><br><span class="line">        fastcgi_pass   php:9000;         # 转发到 PHP 服务器的地址,PHP是容器的别名</span><br><span class="line">        fastcgi_index  index.php;        </span><br><span class="line">        fastcgi_param  SCRIPT_FILENAME  /php$fastcgi_script_name;  # 转发的文件名</span><br><span class="line">        include        fastcgi_params;                                </span><br><span class="line">    &#125;   </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：<br>$fastcgi_script_name ：代表当前访问的文件名，比如，如果访问的是 localhost/1.php ，那么这一项的值就是 1.php<br>d、退出 nginx 容器并重新启该容器<br>因为我们修改了 nginx 的配置文件，所以我们需要重启服务器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart nginx</span><br></pre></td></tr></table></figure><p>e、进入 phpfpm 容器创建 /php 目录<br>在 nginx 中我们配置了，当遇到 PHP 脚本时，就转发 <code>/php$fastcgi_script_name;</code> 这个路径到 php 容器，所以PHP会到它的 <code>/php</code> 目录下去查找，所以我们需要进入 PHP 创建中并创建这个目录。<br>进入PHP容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it phpfpm7.2 /bin/sh</span><br></pre></td></tr></table></figure><p>进入容器之后，创建目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /php</span><br></pre></td></tr></table></figure><p>然后我们就可以在 /php 目录中创建  php 脚本了，这些脚本就可以通过浏览器运行访问了。<br>Nginx 运行PHP的流程：<br><img src="https://ws3.sinaimg.cn/large/005BYqpgly1fxtmcc87rcj30vy0m6abh.jpg" alt=""><br>a、nginx 判断访问的文件以 .php 结尾<br>b、nginx 将 /php/1.php 这个路径传给 PHP 的9000端口<br>c、PHP接收到nginx传过来的路径，就在本机中读取这个文件并运行<br>d、PHP将运行结果返回给 nginx<br>e、NGINX将结果返回给用户</p><h3 id="两个问题"><a href="#两个问题" class="headerlink" title="两个问题"></a>两个问题</h3><p>lnmp环境搭建好了，但是还有些问题需要考虑<br>1、为PHP容器中安装扩展<br>我们使用的是 PHP 默认的镜像，这个镜像中缺少很多必要的 PHP 扩展，比如 gd、redis、pdo_mysql 等，这些扩展都需要单独安装。<br>不过官方提供了安装扩展的两种方法：<br>​    核心扩展（pdo_mysql,gd等） 使用 docker-php-ext-install<br>如安装 gd 库：(先进入PHP容器，然后执行以下命令)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-php-ext-install gd</span><br></pre></td></tr></table></figure><p>​    其它扩展（redis、yaf、swoole等）使用 pecl<br>如安装 redis：(先进入PHP容器，然后执行以下命令)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pecl install redis</span><br><span class="line">docker-php-ext-enable redis</span><br></pre></td></tr></table></figure><p>2、把两个容器代码的目录都绑定到一个目录中<br>现在我们需要把静态页保存到 nginx 容器中，然后把 php 脚本写到 php 容器中，这样在放代码时比较麻烦，所以我们可以将两个服务器的代码目录都绑定到本机，这样直接在本机就可以编写代码了。<br>a、在本机创建一代码目录<br>b、删除nginx容器重新创建一个新的容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name nginx -d -p 8888:80 -v 本地目录:/usr/share/nginx/html --link phpfpm7.2:php nginx:1.14.1-alpine</span><br></pre></td></tr></table></figure><p>通过 -v 我们就把 nginx 中网站根目录绑定球果一地的目录中了。<br>创建 nginx 容器之后，重新向前面一样修改一下 <code>/etc/nginx/conf.d/default.conf</code> 配置文件，然后重新启动即可。<br>c、删除PHP容器然后重新创建一个新的容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name phpfpm7.2 -d -v 本地目录:/php --link mysql01:mysql php:7.2-fpm-alpine</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP版本的（snowflake）</title>
      <link href="/2018/11/26/snowflake/"/>
      <url>/2018/11/26/snowflake/</url>
      
        <content type="html"><![CDATA[<p><img src="https://ws3.sinaimg.cn/large/005BYqpggy1fxlgwgv3etj30j008a0up.jpg" alt=""><br><strong>snowflake算法好像是订单号的妈妈</strong></p><a id="more"></a><h3 id="生成订单号"><a href="#生成订单号" class="headerlink" title="生成订单号"></a>生成订单号</h3><p>在下订单时，我们需要为订单生成一个 唯一 的订单号，为了能够生成一个在高并发、集群环境下依然唯一的订单号，我们可以使用 twitter 提供的 snowflake 算法。</p><p><strong>snowflake</strong><br>snowflake 算法生成的订单号是由 64位（8个字节）二进制数来保存的，它的每一位的含义如下：<br><img src="https://images2015.cnblogs.com/blog/1077828/201707/1077828-20170703095946862-1687565458.png" alt=""><br><img src="https://ws3.sinaimg.cn/large/005BYqpggy1fxlh2fbyakj30qa0d142f.jpg" alt=""></p><h3 id="PHP-版本的-snowflake"><a href="#PHP-版本的-snowflake" class="headerlink" title="PHP 版本的 snowflake"></a>PHP 版本的 snowflake</h3><p>由于 PHP 语言的特点，PHP中的数据用完就会销毁，下次再执行时又是全新的数据，这就导致在 PHP 中无效保存 上一次的数据  以及 持久存在的数字序列，为了解决这两个问题，我们可以使用 redis 来保存需要持久存在的数据。Snowflake 中有两个数据需要保存到 Redis ：上次生成的时间戳 和 序列ID。<br>所以修改之后的PHP版本的 Snowflake 为(以laravel框架实例)：</p><p><strong>1、安装 redis 扩展</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer <span class="keyword">require</span> predis/predis</span><br></pre></td></tr></table></figure><p><strong>2、在自定义php文件里添加 snowflake 类<a href="https://blog.treelo.xin/2018/11/24/rest/" target="_blank" rel="noopener">laravel自定义全局函数看这里</a></strong><br>这里在 app/helpers.php 文件中添加</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Facades</span>\<span class="title">Redis</span>;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成唯一订单编号</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getOrderSn</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $sf = <span class="keyword">new</span> SnowFlake(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> $sf-&gt;generateID();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SnowFlake</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Offset from Unix Epoch</span></span><br><span class="line"><span class="comment">     * Unix Epoch : January 1 1970 00:00:00 GMT</span></span><br><span class="line"><span class="comment">     * Epoch Offset : January 1 2000 00:00:00 GMT</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">const</span> EPOCH_OFFSET = <span class="number">1483200000000</span>;</span><br><span class="line">    <span class="keyword">const</span> SIGN_BITS = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">const</span> TIMESTAMP_BITS = <span class="number">41</span>;</span><br><span class="line">    <span class="keyword">const</span> DATACENTER_BITS = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">const</span> MACHINE_ID_BITS = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">const</span> SEQUENCE_BITS = <span class="number">12</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> mixed</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> $datacenter_id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> mixed</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> $machine_id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> null|int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">// protected $lastTimestamp = null;   需要保存到 Redis</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">// protected $sequence = 1;   需要保存到 Redis</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> $signLeftShift = <span class="keyword">self</span>::TIMESTAMP_BITS + <span class="keyword">self</span>::DATACENTER_BITS + <span class="keyword">self</span>::MACHINE_ID_BITS + <span class="keyword">self</span>::SEQUENCE_BITS;</span><br><span class="line">    <span class="keyword">protected</span> $timestampLeftShift = <span class="keyword">self</span>::DATACENTER_BITS + <span class="keyword">self</span>::MACHINE_ID_BITS + <span class="keyword">self</span>::SEQUENCE_BITS;</span><br><span class="line">    <span class="keyword">protected</span> $dataCenterLeftShift = <span class="keyword">self</span>::MACHINE_ID_BITS + <span class="keyword">self</span>::SEQUENCE_BITS;</span><br><span class="line">    <span class="keyword">protected</span> $machineLeftShift = <span class="keyword">self</span>::SEQUENCE_BITS;</span><br><span class="line">    <span class="keyword">protected</span> $maxSequenceId = <span class="number">-1</span> ^ (<span class="number">-1</span> &lt;&lt; <span class="keyword">self</span>::SEQUENCE_BITS);</span><br><span class="line">    <span class="keyword">protected</span> $maxMachineId = <span class="number">-1</span> ^ (<span class="number">-1</span> &lt;&lt; <span class="keyword">self</span>::MACHINE_ID_BITS);</span><br><span class="line">    <span class="keyword">protected</span> $maxDataCenterId = <span class="number">-1</span> ^ (<span class="number">-1</span> &lt;&lt; <span class="keyword">self</span>::DATACENTER_BITS);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constructor to set required paremeters</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mixed $dataCenter_id Unique ID for datacenter (if multiple locations are used)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mixed $machine_id Unique ID for machine (if multiple machines are used)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> \Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($dataCenter_id, $machine_id)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ($dataCenter_id &gt; <span class="keyword">$this</span>-&gt;maxDataCenterId) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> \<span class="keyword">Exception</span>(<span class="string">'dataCenter id should between 0 and '</span> . <span class="keyword">$this</span>-&gt;maxDataCenterId);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ($machine_id &gt; <span class="keyword">$this</span>-&gt;maxMachineId) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> \<span class="keyword">Exception</span>(<span class="string">'machine id should between 0 and '</span> . <span class="keyword">$this</span>-&gt;maxMachineId);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;datacenter_id = $dataCenter_id;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;machine_id = $machine_id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Generate an unique ID based on SnowFlake</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> \Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">generateID</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $sign = <span class="number">0</span>; <span class="comment">// default 0</span></span><br><span class="line">        $timestamp = <span class="keyword">$this</span>-&gt;getUnixTimestamp();</span><br><span class="line"></span><br><span class="line">        $lastTimeStamp = Redis::get(<span class="string">'shop:order:lastTimeStamp'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ($timestamp &lt; $lastTimeStamp) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> \<span class="keyword">Exception</span>(<span class="string">'"Clock moved backwards!'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ($timestamp == $lastTimeStamp) &#123; <span class="comment">//与上次时间戳相等，需要生成序列号</span></span><br><span class="line">            $sequence = Redis::incr(<span class="string">'shop:order:sequence'</span>);</span><br><span class="line">            <span class="keyword">if</span> ($sequence == <span class="keyword">$this</span>-&gt;maxSequenceId) &#123; <span class="comment">//如果序列号超限，则需要重新获取时间</span></span><br><span class="line">                $timestamp = <span class="keyword">$this</span>-&gt;getUnixTimestamp();</span><br><span class="line">                <span class="keyword">while</span> ($timestamp &lt;= $lastTimeStamp) &#123;</span><br><span class="line">                    $timestamp = <span class="keyword">$this</span>-&gt;getUnixTimestamp();</span><br><span class="line">                &#125;</span><br><span class="line">                Redis::set(<span class="string">'shop:order:sequence'</span>, <span class="number">1</span>);</span><br><span class="line">                $sequence = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Redis::set(<span class="string">'shop:order:sequence'</span>, <span class="number">1</span>);</span><br><span class="line">            $sequence = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Redis::set(<span class="string">'shop:order:lastTimeStamp'</span>, $timestamp);</span><br><span class="line">        $time = (int)($timestamp - <span class="keyword">self</span>::EPOCH_OFFSET);</span><br><span class="line">        $id = ($sign &lt;&lt; <span class="keyword">$this</span>-&gt;signLeftShift) | ($time &lt;&lt; <span class="keyword">$this</span>-&gt;timestampLeftShift) | (<span class="keyword">$this</span>-&gt;datacenter_id &lt;&lt; <span class="keyword">$this</span>-&gt;dataCenterLeftShift) | (<span class="keyword">$this</span>-&gt;machine_id &lt;&lt; <span class="keyword">$this</span>-&gt;machineLeftShift) | $sequence;</span><br><span class="line">        <span class="keyword">return</span> (string)$id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get UNIX timestamp in microseconds</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int  Timestamp in microseconds</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">getUnixTimestamp</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> floor(microtime(<span class="keyword">true</span>) * <span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>添加之后就可以在项目中使用 getOrderSn 函数来生成订单号了：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">    Route::get(<span class="string">'testSN'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> getOrderSn();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>参考自我的课程讲义</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> snowflake </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>接口开发之后端</title>
      <link href="/2018/11/24/rest/"/>
      <url>/2018/11/24/rest/</url>
      
        <content type="html"><![CDATA[<p><img src="https://ws3.sinaimg.cn/large/005BYqpggy1fxlac7dcgfj30pu08mags.jpg" alt=""><br>我也挺喜欢前后端分离来开发项目的，虽然都得自己干。</p><a id="more"></a><h1 id="前、后端分离"><a href="#前、后端分离" class="headerlink" title="前、后端分离"></a>前、后端分离</h1><p>随着前端设备（智能手机、IPAD、平板、笔记本、摄像头、智能家具等）的及物联网的发展，前端的形式变得更加多样化：</p><p><img src="http://a.hiphotos.baidu.com/image/%70%69%63/item/b3fb43166d224f4a90583a5504f790529922d1b7.jpg" alt=""></p><p>在这种时代的大背景下，传统的 <code>在前端代码中嵌入后端代码的混合式开发</code> 已经无法满足目前的情况了。</p><p>前端技术慢慢从后端开发中分离了出来，前端只关注前端页在，后端只负责数据的处理，后端负责提供数据接口与前端进行通信，通信时一般使用 <code>json/xml</code> 格式。</p><p>既然前、后端通过接口进行沟通，那么我们就要为接口定义一个规范，如果所有的接口都满足同样的规范，就可以降低沟通和开发的成本。</p><h1 id="REST-规范"><a href="#REST-规范" class="headerlink" title="REST 规范"></a>REST 规范</h1><p><img src="http://d.hiphotos.baidu.com/image/%70%69%63/item/91ef76c6a7efce1b9e16808ca251f3deb48f65b2.jpg" alt=""></p><p>RESTful 是一种软件设计风格，由 <a href="http://roy.gbiv.com/" target="_blank" rel="noopener">Roy Fielding</a> 在他的 <a href="http://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm" target="_blank" rel="noopener">论文</a> 中提出，全称为 <code>Representational State Transfer</code>，直译为<code>表现层状态转移</code>。</p><p>RESTful 风格的接口，目前来看，实现的最好的就是 <a href="https://developer.github.com/v3/" target="_blank" rel="noopener">Github API</a>，经常被效仿。接下来我们通过分析 Github API 来引出我们的 API 设计原则。</p><h2 id="使用-HTTPS"><a href="#使用-HTTPS" class="headerlink" title="使用 HTTPS"></a>使用 HTTPS</h2><p>HTTPS（全称：Hyper Text Transfer Protocol over Secure Socket Layer），是以安全为目标的 HTTP 通道，简单讲是 HTTP 的安全版。</p><p>HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，比http协议安全。</p><p>HTTPS 为接口的安全提供了保障，可以有效防止通信被窃听和篡改。</p><h2 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h2><p>应当尽可能的将 API 与其主域名区分开，可以使用专用的域名，访问我们的 API，例如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="comment">//api.xxx.com</span></span><br></pre></td></tr></table></figure><p>或者可以放在主域名下，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.xxx.com/api</span><br></pre></td></tr></table></figure><h2 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h2><p>随着业务的发展，需求的不断变化，API 的迭代是必然的，很可能当前版本正在使用，而我们就得开发甚至上线一个不兼容的新版本，为了让旧用户可以正常使用，为了保证开发的顺利进行，我们需要控制好 API 的版本。</p><p>通常情况下，有两种做法：</p><ul><li>将版本号直接加入 URL 中</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://api.xxx.com/v1</span><br><span class="line">https://api.xxx.com/v2</span><br></pre></td></tr></table></figure><h2 id="接口命名"><a href="#接口命名" class="headerlink" title="接口命名"></a>接口命名</h2><p>规则一、使用 HTTP 动词代表操作的类型。</p><table><thead><tr><th>动词</th><th>描述</th></tr></thead><tbody><tr><td>GET</td><td>获取资源，单个或多个</td></tr><tr><td>POST</td><td>创建资源</td></tr><tr><td>PUT</td><td>更新资源，客户端提供完整的资源数据</td></tr><tr><td>PATCH</td><td>更新资源，客户端提供部分的资源数据</td></tr><tr><td>DELETE</td><td>删除资源</td></tr></tbody></table><p>GitHub 网站的一些例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">GET /issues                                      列出所有的 issue</span><br><span class="line">GET /repos/:owner/:repo                          列出某个项目的 信息</span><br><span class="line">GET /repos/:owner/:repo/issues/:number           获取某个项目的某个 issue</span><br><span class="line">POST /repos/:owner/:repo/issues                  为某个项目创建 issue</span><br><span class="line">PATCH /repos/:owner/:repo/issues/:number         修改某个 issue</span><br><span class="line">PUT /repos/:owner/:repo/issues/:number/lock      锁住某个 issue</span><br><span class="line">DELETE /repos/:owner/:repo/issues/:number/lock   接收某个 issue</span><br></pre></td></tr></table></figure><p>说明：冒号（：xx)）开始的代表变量，例如 /repos/fortheday001/jxshop</p><p>规则二、接口地址的命名应该是名词（一般是复数形式）</p><p>错误的例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">POST https://api.xxx.com/createTopic</span><br><span class="line">GET https://api.xxx.com/topic/show/1</span><br><span class="line">POST https://api.xxx.com/topics/1/comments/create</span><br><span class="line">POST https://api.xxx.com/topics/1/comments/100/delete</span><br></pre></td></tr></table></figure><p>正确的例子（名词）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">POST https://api.xxx.com/topics</span><br><span class="line">GET https://api.xxx.com/topics/1</span><br><span class="line">POST https://api.xxx.com/topics/1/comments</span><br><span class="line">DELETE https://api.xxx.com/topics/1/comments/100</span><br></pre></td></tr></table></figure><h2 id="资源过滤"><a href="#资源过滤" class="headerlink" title="资源过滤"></a>资源过滤</h2><p>当我们需要搜索、排序、分页等过滤数据时我们需要在 URL 传合适的参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?state=closed: 不同状态的资源</span><br><span class="line">?page=2&amp;per_page=100：访问第几页数据，每页多少条。</span><br><span class="line">?sortby=name&amp;order=asc：指定返回结果按照哪个属性排序，以及排序顺序。</span><br></pre></td></tr></table></figure><p>比如获取10条用户的请求地址为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /users?per_page=10</span><br></pre></td></tr></table></figure><h2 id="正确使用状态码"><a href="#正确使用状态码" class="headerlink" title="正确使用状态码"></a>正确使用状态码</h2><p>接口在返回数据时应该正确的返回 HTTP 对应的状态码，常用的状态码如下：</p><p><img src="http://g.hiphotos.baidu.com/image/%70%69%63/item/95eef01f3a292df5ee24e553b1315c6035a87394.jpg" alt=""></p><p><img src="http://h.hiphotos.baidu.com/image/%70%69%63/item/6a63f6246b600c333802968e174c510fd9f9a179.jpg" alt=""></p><p><img src="http://g.hiphotos.baidu.com/image/%70%69%63/item/024f78f0f736afc3177b7723be19ebc4b7451204.jpg" alt=""></p><p>常用状态码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$_http_code = [</span><br><span class="line">    <span class="number">200</span> =&gt; <span class="string">"OK"</span>,                   <span class="comment">// 成功</span></span><br><span class="line">    <span class="number">400</span> =&gt; <span class="string">"Bad Request"</span>,          <span class="comment">// 请求数据有问题</span></span><br><span class="line">    <span class="number">401</span> =&gt; <span class="string">"Unauthorized"</span>,         <span class="comment">// 未登录</span></span><br><span class="line">    <span class="number">403</span> =&gt; <span class="string">"Forbidden"</span>,            <span class="comment">// 登录但没有权限</span></span><br><span class="line">    <span class="number">404</span> =&gt; <span class="string">"Not Found"</span>,            <span class="comment">// 请求数据没找到</span></span><br><span class="line">];</span><br></pre></td></tr></table></figure><h2 id="数据响应格式"><a href="#数据响应格式" class="headerlink" title="数据响应格式"></a>数据响应格式</h2><p>接口应该返回 <code>JSON</code> 或者 <code>XML</code> 格式的数据。</p><p>返回的数据的结构应该有一个固定的结构，这个结构可以自己设计，比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&apos;message&apos; =&gt; &apos;:message&apos;,          // 错误的具体描述</span><br><span class="line">&apos;errors&apos; =&gt; &apos;:errors&apos;,            // 参数的具体错误描述，422 等状态提供</span><br><span class="line">&apos;code&apos; =&gt; &apos;:code&apos;,                // 自定义的异常码</span><br><span class="line">&apos;status_code&apos; =&gt; &apos;:status_code&apos;,  // http状态码</span><br><span class="line">&apos;debug&apos; =&gt; &apos;:debug&apos;,              // debug 信息，非生产环境提供</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"message"</span>: <span class="string">"422 Unprocessable Entity"</span>,</span><br><span class="line">    <span class="attr">"errors"</span>: &#123;</span><br><span class="line">        <span class="attr">"name"</span>: [</span><br><span class="line">            <span class="string">"姓名 必须为字符串。"</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"status_code"</span>: <span class="number">422</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"message"</span>: <span class="string">"您无权访问该订单"</span>,</span><br><span class="line">    <span class="attr">"status_code"</span>: <span class="number">403</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="频繁限制"><a href="#频繁限制" class="headerlink" title="频繁限制"></a>频繁限制</h2><p>为了防止服务器被攻击，减少服务器压力，需要对接口进行合适的限流控制，需要在响应头信息中加入合适的信息，告知客户端当前的限流情况</p><ul><li>X-RateLimit-Limit :100 最大访问次数</li><li>X-RateLimit-Remaining :93 剩余的访问次数</li><li>X-RateLimit-Reset :1513784506 到该时间点，访问次数会重置为 <code>X-RateLimit-Limit</code></li></ul><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">curl -i https://api.github.com/users/octocat</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Date: Mon, 01 Jul 2013 17:27:06 GMT</span><br><span class="line">Status: 200 OK</span><br><span class="line">X-RateLimit-Limit: 60</span><br><span class="line">X-RateLimit-Remaining: 56</span><br><span class="line">X-RateLimit-Reset: 1372700873</span><br></pre></td></tr></table></figure><p>超过限流次数后，需要返回 <code>429 Too Many Requests</code> 错误。</p><h2 id="编写文档"><a href="#编写文档" class="headerlink" title="编写文档"></a>编写文档</h2><p>为了方便用户使用，我们需要提供清晰的文档，尽可能包括以下几点</p><ul><li>包括每个接口的请求参数，每个参数的类型限制，是否必填，可选的值等。</li><li>响应结果的例子说明，包括响应结果中，每个参数的释义。</li><li>对于某一类接口，需要有尽量详细的文字说明，比如针对一些特定场景，接口应该如何调用。</li></ul><h1 id="Postman"><a href="#Postman" class="headerlink" title="Postman"></a>Postman</h1><p>postman 是一个接口访问软件，非常适合服务器端程序员用来测试接口、发布接口文档等。</p><p><img src="http://a.hiphotos.baidu.com/image/%70%69%63/item/a1ec08fa513d2697f10c401b58fbb2fb4216d89d.jpg" alt=""></p><h2 id="集合管理"><a href="#集合管理" class="headerlink" title="集合管理"></a>集合管理</h2><p>我们可以在左侧创建接口集合，将项目中所有的接口都统一分类管理起来：</p><p><img src="assets/image-20181121143604525-2782164.png" alt="image-20181121143604525"></p><h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><p>我们可以在软件中管理环境变量，环境变量可以让我们把系统的IP地址、JWT字符串等常用的内容定义到变量中保存，然后通过变量来使用这个数据，就不用每次都填写了：</p><p><img src="http://a.hiphotos.baidu.com/image/%70%69%63/item/32fa828ba61ea8d3d5df3c429a0a304e241f58f2.jpg" alt=""></p><p>添加环境变量：</p><p><img src="http://c.hiphotos.baidu.com/image/%70%69%63/item/a71ea8d3fd1f4134bdc94d38281f95cad0c85efd.jpg" alt=""></p><p>添加之后，就可以通过 <code></code> 来使用了：</p><p><img src="http://a.hiphotos.baidu.com/image/%70%69%63/item/b3b7d0a20cf431ad23050b7f4636acaf2fdd98a5.jpg" alt=""></p><h2 id="保存示例数据"><a href="#保存示例数据" class="headerlink" title="保存示例数据"></a>保存示例数据</h2><p>当我们使用 postman 请求接口之后，会为我们美化服务器返回的数据：</p><p><img src="http://d.hiphotos.baidu.com/image/%70%69%63/item/34fae6cd7b899e51547472524fa7d933c9950df9.jpg" alt=""></p><p>返回数据之后，我们可以点击 <code>Save Response</code> 按钮保存返回的数据，保存的目的是在制作接口文档时，这些数据可以做为示例数据，保存时可以设置一个名字：</p><p><img src="http://h.hiphotos.baidu.com/image/%70%69%63/item/b17eca8065380cd74ebbeaabac44ad34588281cb.jpg" alt=""></p><h2 id="生成接口文档"><a href="#生成接口文档" class="headerlink" title="生成接口文档"></a>生成接口文档</h2><p>postman 还有一个好用的功能就是可以帮助我们生成 <code>接口文档</code>。</p><p>当我们编写好接口以及保存好接口返回的数据示例之后，我们就可以使用它来生成 接口文档：</p><p><img src="http://f.hiphotos.baidu.com/image/%70%69%63/item/1b4c510fd9f9d72aa5c3585bd92a2834359bbbd5.jpg" alt=""></p><p>点击 <code>Publish Docs</code> 生成接口文档时，先选择我们要使用的环境变量：</p><p><img src="http://e.hiphotos.baidu.com/image/%70%69%63/item/7e3e6709c93d70cf0f86e14bf5dcd100baa12b73.jpg" alt=""></p><p>选择完之后就可以发布了，发布之后，我们就得到发布之后的浏览地址：</p><p><img src="http://f.hiphotos.baidu.com/image/%70%69%63/item/8718367adab44aedab86f6a2be1c8701a08bfba8.jpg" alt=""></p><p>把这个接口地址发给前端程序员就可以了：</p><p><img src="http://c.hiphotos.baidu.com/image/%70%69%63/item/34fae6cd7b899e5155f671524fa7d933c8950d7f.jpg" alt=""></p><p>接口文档地址：<a href="https://documenter.getpostman.com/view/3908128/RzZDjxgP" target="_blank" rel="noopener">https://documenter.getpostman.com/view/3908128/RzZDjxgP</a></p><h1 id="Laravel"><a href="#Laravel" class="headerlink" title="Laravel"></a>Laravel</h1><h2 id="定义路由"><a href="#定义路由" class="headerlink" title="定义路由"></a>定义路由</h2><p>在做接口开发时，所有的接口都定义在 <code>routes/api.php</code> 文件中。</p><p>定义在 <code>routes/api.php</code> 文件中的路由有几下几个特点：</p><p>1、接口地址中必须加上 api 前缀，比如：<a href="http://127.0.0.1:8000/api/goods" target="_blank" rel="noopener">http://127.0.0.1:8000/api/goods</a></p><p>2、没有 <code>csrf</code> 、<code>session</code>、<code>cookie</code>等传统网站开发中的常用功能（这些功能使用 jwt(json web token)（令牌）替代）</p><p>3、所有接口都会有频率限制（每分钟60次）（通过 Laravel 中自带的 <code>throttle</code> 中间件实现）</p><h2 id="频率限制"><a href="#频率限制" class="headerlink" title="频率限制"></a>频率限制</h2><p><code>routes/api.php</code> 文件中定义的路由都会默认被应用 <code>throttle</code> 中间件，<code>同一个IP1分钟内最多访问一个接口60次。</code></p><p><img src="assets/image-20181123091223386-2935543.png" alt="image-20181123091223386"></p><p>如果要为不同的接口设置不同的频率，可以在 <code>routes/api.php</code> 文件中定义路由时，先定义路由组，然后为这个路由组设置频率，所有这个组中的路由都会被应用同样的频率限制：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1分钟最多5次</span></span><br><span class="line">Route::group([<span class="string">'prefix'</span>=&gt;<span class="string">'api'</span>,<span class="string">'middleware'</span>=&gt;<span class="string">'throttle:5'</span>],<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Route::get(<span class="string">'users'</span>,<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> \App\User::all();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 10分钟最多5次</span></span><br><span class="line">Route::group([<span class="string">'prefix'</span>=&gt;<span class="string">'api'</span>,<span class="string">'middleware'</span>=&gt;<span class="string">'throttle:5,10'</span>],<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Route::get(<span class="string">'users'</span>,<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> \App\User::all();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="AJAX跨域"><a href="#AJAX跨域" class="headerlink" title="AJAX跨域"></a>AJAX跨域</h2><p>在前、后端分离开发时，前端都是使用 <code>ajax</code> 与服务器端进行通信的，但是 ajax 有一个限制：<code>不能跨域名访问服务器接口</code>。</p><p>在实现工作中，前端和后端经常是部署在不同的服务器上，也就都拥有不同的域名，这时前端发送 AJAX 就会报错，比如：前端在 127.0.0.1:8000 这个域名下，而后端在 127.0.0.1:8080 这个端口下时：</p><p><img src="http://d.hiphotos.baidu.com/image/%70%69%63/item/96dda144ad3459825131aed401f431adcbef8439.jpg" alt=""></p><p>解决办法：</p><p>目前常用的解决办法有 <code>jsonp</code> 和 <code>cors</code>。</p><p>JSONP：只支持 GET 请求的跨域。</p><p>CORS：(跨站资源共享)，实现原理是在服务器端设置几个 http 协议头即可，缺点是有些老旧的浏览器不支持。</p><p>Laravel 中使用 CORS：</p><p>如果每次发请求时都手动设置协议头太麻烦了，所以可以使用 Laravel 中间件来实现。</p><p>Laravel 的中间件会在接收和发送请求时自动被调用，这样就可以只编写一次代码就可以在每次请求时自动设置协议头了。</p><p>1、创建中间件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan make:middleware CorsMiddleware</span><br></pre></td></tr></table></figure><p>2、编写代码</p><p>app\Http\Middleware\CorsMiddleware.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span><span class="params">($request, Closure $next)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $response = $next($request);</span><br><span class="line">    $origin = $request-&gt;server(<span class="string">'HTTP_ORIGIN'</span>) ? $request-&gt;server(<span class="string">'HTTP_ORIGIN'</span>) : <span class="string">''</span>;</span><br><span class="line">    <span class="comment">// 允许访问的域名列表</span></span><br><span class="line">    $allow_origin = [</span><br><span class="line">        <span class="string">'http://localhost:8080'</span>,</span><br><span class="line">    ];</span><br><span class="line">    <span class="comment">// 通过 $response-&gt;header 设置协议头</span></span><br><span class="line">    <span class="comment">// (扩展：如果想要允许所有域名跨域访问，就可以去掉if判断，然后</span></span><br><span class="line">    <span class="comment">//     直接设置 Access-Control-Allow-Origin : *)</span></span><br><span class="line">    <span class="keyword">if</span> (in_array($origin, $allow_origin)) &#123;</span><br><span class="line">        <span class="comment">// 如果要允许所有域名跨域访问，设置把这一项设置为 *</span></span><br><span class="line">        $response-&gt;header(<span class="string">'Access-Control-Allow-Origin'</span>, $origin);</span><br><span class="line">        $response-&gt;header(<span class="string">'Access-Control-Allow-Methods'</span>, <span class="string">'GET, POST, PATCH, PUT, DELETE, OPTIONS'</span>);</span><br><span class="line">        $response-&gt;header(<span class="string">'Access-Control-Allow-Headers'</span>, <span class="string">'Origin, Content-Type, Cookie, X-CSRF-TOKEN, Accept, Authorization, X-XSRF-TOKEN'</span>);</span><br><span class="line">        $response-&gt;header(<span class="string">'Access-Control-Expose-Headers'</span>, <span class="string">'Authorization, authenticated'</span>);</span><br><span class="line">        $response-&gt;header(<span class="string">'Access-Control-Allow-Credentials'</span>, <span class="string">'true'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> $response;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、注册中间件</p><p>app\Http\Kernel.php 文件中注册全局中间件。</p><p>注册到 <code>$middleware</code> 数组中的中间件会在所有请求时会自动调用。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> $middleware = [</span><br><span class="line">    \App\Http\Middleware\CheckForMaintenanceMode::class,</span><br><span class="line">    \Illuminate\Foundation\Http\Middleware\ValidatePostSize::class,</span><br><span class="line">    \App\Http\Middleware\TrimStrings::class,</span><br><span class="line">    \Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull::class,</span><br><span class="line">    \App\Http\Middleware\TrustProxies::class,</span><br><span class="line">    \App\Http\Middleware\CorsMiddleware::class</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h2 id="发送-HTTP-状态码"><a href="#发送-HTTP-状态码" class="headerlink" title="发送 HTTP 状态码"></a>发送 HTTP 状态码</h2><p>在 Laravel 框架中可以直接使用 <code>response</code> 方法向前端发送数据和状态码信息。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> response(<span class="string">'无权访问！'</span>， <span class="number">403</span>);</span><br></pre></td></tr></table></figure><p>这时框架会在发送数据时设置一个 403 的协议头信息，当浏览器收到非 <code>2xx</code> 开头的状态码时会显示显示错误信息：</p><p><img src="http://e.hiphotos.baidu.com/image/%70%69%63/item/95eef01f3a292df5ecdee753b1315c6034a87352.jpg" alt=""></p><p>当我们使用 axios 请求这个地址时，如果服务器返回的是<code>非 2xx</code> 开头的状态码，那么就会认为发生了错误，错误信息需要在 <code>catch</code> 中获取：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">axios.get(<span class="string">'http://127.0.0.1:8000/api/test'</span>)</span><br><span class="line">    .then(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 服务器返回了 2xx 状态码(代码成功时执行)</span></span><br><span class="line">    <span class="built_in">console</span>.log( res.data )</span><br><span class="line">&#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err.response) &#123;</span><br><span class="line">          <span class="comment">// 服务器返回了一个非 2xx 的状态码时</span></span><br><span class="line">          <span class="built_in">console</span>.log(err.response.data);</span><br><span class="line">          <span class="built_in">console</span>.log(err.response.status);</span><br><span class="line">          <span class="built_in">console</span>.log(err.response.headers);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (err.request) &#123;</span><br><span class="line">          <span class="comment">// 发送请求时出错(没有发送成功)</span></span><br><span class="line">          <span class="built_in">console</span>.log(err.request);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// 设置 axios 时出错(没有发送成功)</span></span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'Error'</span>, err.message);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(err.config);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="发送自定义状态码"><a href="#发送自定义状态码" class="headerlink" title="发送自定义状态码"></a>发送自定义状态码</h2><p>上面的方式是在 HTTP 协议头中发送状态码信息，这种方式的缺点的是：<code>如果不是 2xx 的状态码，浏览器就会显示错误</code> 这样的用户体验不太好。</p><p>我们可以在程序中无论正确与否都发送 200 状态码（成功），然后把错误的状态码信息放到我们自定义的数据中返回给前端，然后前端通过我们定义的状态码来判断对错，这样浏览器就不会显示错误信息了：</p><p>比如：我们可以在项目中定义两个函数，成功时调用 ok 向前端发数据 ，调用时使用 error 向后端发消息：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ok</span><span class="params">($data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">        <span class="string">'status_code'</span> =&gt; <span class="number">200</span>,</span><br><span class="line">        <span class="string">'message'</span>=&gt;<span class="string">'ok'</span>,</span><br><span class="line">        <span class="string">'data'</span> =&gt; $data</span><br><span class="line">    ];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">error</span><span class="params">($error, $code)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> $_http_code = [</span><br><span class="line">        <span class="number">400</span> =&gt; <span class="string">"Bad Request"</span>,                  <span class="comment">// 请求数据有问题</span></span><br><span class="line">        <span class="number">401</span> =&gt; <span class="string">"Unauthorized"</span>,                 <span class="comment">// 未登录</span></span><br><span class="line">        <span class="number">403</span> =&gt; <span class="string">"Forbidden"</span>,                    <span class="comment">// 登录但没有权限</span></span><br><span class="line">        <span class="number">404</span> =&gt; <span class="string">"Not Found"</span>,                    <span class="comment">// 请求数据没找到</span></span><br><span class="line">        <span class="number">422</span> =&gt; <span class="string">"Unprocessable Entity"</span>,         <span class="comment">// 无法处理输入的数据</span></span><br><span class="line">    ];</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">        <span class="string">'status_code'</span> =&gt; $code,</span><br><span class="line">        <span class="string">'message'</span> =&gt; $_http_code[$code],</span><br><span class="line">        <span class="string">'errors'</span> =&gt; $error</span><br><span class="line">    ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在程序中我们可以这样显示数据：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">(Request $req)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        $validator = Validator::make($req-&gt;all(), [</span><br><span class="line">            <span class="string">'title'</span> =&gt; <span class="string">'required|unique:posts|max:255'</span>,</span><br><span class="line">            <span class="string">'body'</span> =&gt; <span class="string">'required'</span>,</span><br><span class="line">        ]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ($validator-&gt;fails()) &#123;</span><br><span class="line">            <span class="keyword">return</span> error($validator-&gt;errors(), <span class="number">422</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ok([</span><br><span class="line">            <span class="string">'name'</span> =&gt; <span class="string">'tom'</span>,</span><br><span class="line">            <span class="string">'age'</span> =&gt; <span class="number">20</span>,</span><br><span class="line">        ]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时前端收到的消息时，同样返回了 422 错误的状态码，只不过这次不是在 http 协议头中返回的，是在我们正常的数据中返回的，这样浏览器就不会显示错误信息了：</p><p><img src="http://d.hiphotos.baidu.com/image/%70%69%63/item/0b46f21fbe096b634d46151601338744ebf8ac1d.jpg" alt=""></p><h2 id="在-Laravel-框架中添加自定义函数"><a href="#在-Laravel-框架中添加自定义函数" class="headerlink" title="在 Laravel 框架中添加自定义函数"></a>在 Laravel 框架中添加自定义函数</h2><p>有时我们为了让 Laravel 框架更加的好用，我们会向框架中添加一些自定义的函数，那么这些自定义的函数应该放在哪里？其实，我们可以这样做：</p><p>1、创建 <code>app\helpers.php</code> 文件保存我们自定义的函数</p><p>app\helpers.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ok</span><span class="params">($data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">        <span class="string">'status_code'</span> =&gt; <span class="number">200</span>,</span><br><span class="line">        <span class="string">'message'</span>=&gt;<span class="string">'ok'</span>,</span><br><span class="line">        <span class="string">'data'</span> =&gt; $data</span><br><span class="line">    ];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">error</span><span class="params">($error, $code)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> $_http_code = [</span><br><span class="line">        <span class="number">400</span> =&gt; <span class="string">"Bad Request"</span>,                  <span class="comment">// 请求数据有问题</span></span><br><span class="line">        <span class="number">401</span> =&gt; <span class="string">"Unauthorized"</span>,                 <span class="comment">// 未登录</span></span><br><span class="line">        <span class="number">403</span> =&gt; <span class="string">"Forbidden"</span>,                    <span class="comment">// 登录但没有权限</span></span><br><span class="line">        <span class="number">404</span> =&gt; <span class="string">"Not Found"</span>,                    <span class="comment">// 请求数据没找到</span></span><br><span class="line">        <span class="number">422</span> =&gt; <span class="string">"Unprocessable Entity"</span>,         <span class="comment">// 无法处理输入的数据</span></span><br><span class="line">        <span class="number">500</span> =&gt; <span class="string">"Internal Server Error"</span>,         <span class="comment">// 服务器内部错误</span></span><br><span class="line">    ];</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">        <span class="string">'status_code'</span> =&gt; $code,</span><br><span class="line">        <span class="string">'message'</span> =&gt; $_http_code[$code],</span><br><span class="line">        <span class="string">'errors'</span> =&gt; $error</span><br><span class="line">    ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、修改 composer.json 添加自动加载项</p><p>composer.json</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">"autoload": &#123;</span><br><span class="line">    ...</span><br><span class="line">    "files": [</span><br><span class="line">        <span class="string">"app/helpers.php"</span></span><br><span class="line">    ]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>3、命令行中执行加载指令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer dump-auto</span><br></pre></td></tr></table></figure><p>4、重新启动 Laravel 框架然后就可以在项目中直接使用 <code>app\helpers.php</code> 文件中定义的函数了。</p><h2 id="表单验证"><a href="#表单验证" class="headerlink" title="表单验证"></a>表单验证</h2><p>因为 Laravel 框架中的表单验证默认的行为是 <code>验证失败就跳转回上一个页面</code> ，而在做接口开发时我们需要返回 JSON 数据而不是跳转，这时我们有多种解决办法，比如：我们可以采用 <code>手动验证</code> 的方式来验证数据，然后自己来控制在验证失败时返回 JSON 数据：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自己创建验证器</span></span><br><span class="line">$validator = Validator::make($req-&gt;all(), [</span><br><span class="line">            <span class="string">'name'</span> =&gt; <span class="string">'required'</span>,</span><br><span class="line">            <span class="string">'tel'</span> =&gt; <span class="string">'required|regex:/^1[34578][0-9]&#123;9&#125;$/'</span>,</span><br><span class="line">            <span class="string">'province'</span> =&gt; <span class="string">'required'</span>,</span><br><span class="line">            <span class="string">'city'</span> =&gt; <span class="string">'required'</span>,</span><br><span class="line">            <span class="string">'area'</span> =&gt; <span class="string">'required'</span>,</span><br><span class="line">            <span class="string">'address'</span> =&gt; <span class="string">'required'</span>,</span><br><span class="line">            <span class="string">'is_default'</span> =&gt; <span class="string">'required'</span>,</span><br><span class="line">        ]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果验证失败返回 json 数据</span></span><br><span class="line"><span class="keyword">if</span> ($validator-&gt;fails()) &#123;</span><br><span class="line">    <span class="keyword">return</span> error($validator-&gt;errors(), <span class="number">422</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JWT"><a href="#JWT" class="headerlink" title="JWT"></a>JWT</h2><p>在 Laravel 框架中我们可以使用 <code>php-jwt</code> 这个扩展包来生成、验证、解析令牌。</p><h3 id="生成令牌"><a href="#生成令牌" class="headerlink" title="生成令牌"></a>生成令牌</h3><p>1、安装扩展包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer require firebase/php-jwt</span><br></pre></td></tr></table></figure><p>2、.env 中定义加密密钥</p><p>.env</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">JWT_KEN=fdsa32@#RFSDafpeq3r2fews8d783f;fa/fd293f</span><br><span class="line">JWT_EXPIRE=7200</span><br></pre></td></tr></table></figure><p>3、生成令牌</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">Firebase</span>\<span class="title">JWT</span>\<span class="title">JWT</span>;</span><br><span class="line">...</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 读取密钥</span></span><br><span class="line">$key = env(<span class="string">'JWT_KEY'</span>);</span><br><span class="line"><span class="comment">// 当前时间戳</span></span><br><span class="line">$now = time();</span><br><span class="line"><span class="comment">// 加密数据</span></span><br><span class="line">$data = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">"iat"</span> =&gt; $now,         <span class="comment">// 当前时间</span></span><br><span class="line">    <span class="string">"exp"</span> =&gt; $now + env(<span class="string">'JWT_EXPIRE'</span>),      <span class="comment">// 过期时间</span></span><br><span class="line">    <span class="string">"id"</span> =&gt; <span class="number">1</span>,                              <span class="comment">// 用户ID</span></span><br><span class="line">    <span class="comment">// 其它需要保存的数据 ...</span></span><br><span class="line">);</span><br><span class="line"><span class="comment">// 生成 JWT</span></span><br><span class="line">$jwt = JWT::encode($data, $key);</span><br></pre></td></tr></table></figure><h3 id="令牌验证"><a href="#令牌验证" class="headerlink" title="令牌验证"></a>令牌验证</h3><p>在 Laravel 框架中我们可以使用中间件来验证、解析令牌，然后将解析之后的数据保存到 <code>$request-&gt;jwt</code> 属性中，然后在项目中就可以使用 <code>$request-&gt;jwt</code> 来获取 JWT 中的数据了。</p><p>1、创建中间件</p><p>app\Http\Middleware\Jwt.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Middleware</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Closure</span>;</span><br><span class="line"><span class="keyword">use</span> \<span class="title">Firebase</span>\<span class="title">JWT</span>\<span class="title">JWT</span> <span class="title">as</span> <span class="title">JWTCHECK</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Jwt</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Handle an incoming request.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  \Illuminate\Http\Request  $request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  \Closure  $next</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> mixed</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span><span class="params">($request, Closure $next)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $jwt = substr($request-&gt;server(<span class="string">'HTTP_AUTHORIZATION'</span>), <span class="number">7</span>);</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            $request-&gt;jwt = JWTCHECK::decode($jwt, env(<span class="string">'JWT_KEY'</span>), <span class="keyword">array</span>(<span class="string">'HS256'</span>));</span><br><span class="line">            <span class="keyword">return</span> $next($request);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(\<span class="keyword">Exception</span> $e)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> response([</span><br><span class="line">                <span class="string">'code'</span>=&gt;<span class="string">'403'</span>,</span><br><span class="line">                <span class="string">'message'</span>=&gt;<span class="string">'HTTP/1.1 403 Forbidden'</span></span><br><span class="line">            ]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、注册中间件</p><p>app\Http\Kernel.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> $routeMiddleware = [</span><br><span class="line">    <span class="string">'auth'</span> =&gt; \App\Http\Middleware\Authenticate::class,</span><br><span class="line">    <span class="string">'auth.basic'</span> =&gt; \Illuminate\Auth\Middleware\AuthenticateWithBasicAuth::class,</span><br><span class="line">    <span class="string">'bindings'</span> =&gt; \Illuminate\Routing\Middleware\SubstituteBindings::class,</span><br><span class="line">    <span class="string">'cache.headers'</span> =&gt; \Illuminate\Http\Middleware\SetCacheHeaders::class,</span><br><span class="line">    <span class="string">'can'</span> =&gt; \Illuminate\Auth\Middleware\Authorize::class,</span><br><span class="line">    <span class="string">'guest'</span> =&gt; \App\Http\Middleware\RedirectIfAuthenticated::class,</span><br><span class="line">    <span class="string">'signed'</span> =&gt; \Illuminate\Routing\Middleware\ValidateSignature::class,</span><br><span class="line">    <span class="string">'throttle'</span> =&gt; \Illuminate\Routing\Middleware\ThrottleRequests::class,</span><br><span class="line">    <span class="string">'verified'</span> =&gt; \Illuminate\Auth\Middleware\EnsureEmailIsVerified::class,</span><br><span class="line">    <span class="string">'jwt'</span> =&gt; \App\Http\Middleware\Jwt::class,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>3、注册路由时使用中间件</p><p>routers/api.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Route::post(<span class="string">'/login'</span>, <span class="string">'MemberController@login'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 应用 jwt 中间件的路由</span></span><br><span class="line">Route::middleware([<span class="string">'jwt'</span>])-&gt;group(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    Route::get(<span class="string">'/orders'</span>, <span class="string">'OrderController@index'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="接口实现"><a href="#接口实现" class="headerlink" title="接口实现"></a>接口实现</h1><p>接下来我们学习一下如何使用 Laravel 框架实现接口的开发。</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>首先我们需要修改 <code>.env</code> 文件配置上数据库的账号：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">DB_CONNECTION=mysql</span><br><span class="line">DB_HOST=127.0.0.1</span><br><span class="line">DB_PORT=3306</span><br><span class="line">DB_DATABASE=jxshop</span><br><span class="line">DB_USERNAME=root</span><br><span class="line">DB_PASSWORD=123456</span><br></pre></td></tr></table></figure><p>配置好之后注意：<code>需要重新启动服务</code>。</p><h2 id="注册接口"><a href="#注册接口" class="headerlink" title="注册接口"></a>注册接口</h2><p>1、首先我们在 <code>postman</code> 软件中定义接口的名称、地址、参数等信息：</p><p><img src="http://d.hiphotos.baidu.com/image/%70%69%63/item/c2fdfc039245d6889770f9e2a9c27d1ed21b2401.jpg" alt=""></p><p>说明：</p><ul><li>编写接口是先创建集合，然后再创建二级目录来管理接口（接口多时好找）</li><li>接口是 post 时需要在 <code>body</code> 中设置需要提交的数据，一般使用 <code>x-www-form-urlencoded</code> 方式提交数据</li><li>通过环境变量来管理常用的数据，比如使用 <code>host</code> 变量保存接口地址</li></ul><p>2、创建环境变量</p><p>在使用 postman 测试接口时，有些数据使用的频率比较高，比如：服务器地址、令牌等，这时我们就可以定义环境变量来保存这些数据，方便修改和维护。</p><p>打开环境变量管理面板：</p><p><img src="http://f.hiphotos.baidu.com/image/%70%69%63/item/f603918fa0ec08faf4ad58e154ee3d6d54fbdac3.jpg" alt=""></p><p>添加一套环境变量：</p><p><img src="http://a.hiphotos.baidu.com/image/%70%69%63/item/55e736d12f2eb938630331b4d8628535e5dd6f0e.jpg" alt=""></p><p>输入环境变量的名字以及定义的变量和值：</p><p><img src="http://c.hiphotos.baidu.com/image/%70%69%63/item/03087bf40ad162d968b8295a1cdfa9ec8a13cd26.jpg" alt=""></p><p>创建之后选择使用环境变量：</p><p><img src="http://h.hiphotos.baidu.com/image/%70%69%63/item/7aec54e736d12f2e4edbe52642c2d5628435689e.jpg" alt=""></p><p>接口写好之后就可以在 Laravel 中编写代码实现接口了。</p><p>3、配置路由</p><p><code>routes/api.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Route::post(<span class="string">'members'</span>, <span class="string">'MemberController@insert'</span>);</span><br></pre></td></tr></table></figure><p>4、创建模型</p><p>使用 artisan 指令创建模型并保存到 Models 目录中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan make:model Models/Member</span><br></pre></td></tr></table></figure><p>模型中配置基本信息：</p><p>app\Models/Member.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Models</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Eloquent</span>\<span class="title">Model</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Member</span> <span class="keyword">extends</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// 对应的表单</span></span><br><span class="line">    <span class="keyword">protected</span> $table = <span class="string">'members'</span>;</span><br><span class="line">    <span class="comment">// 表中是否有两个时间字段（created_at和updated_at)</span></span><br><span class="line">    <span class="keyword">public</span> $timestamps = <span class="keyword">true</span>;</span><br><span class="line">    <span class="comment">// 设置允许填充的字段</span></span><br><span class="line">    <span class="keyword">protected</span> $fillable = [<span class="string">'username'</span>,<span class="string">'password'</span>];</span><br><span class="line">    <span class="comment">// 需要隐藏的字段（不会发给前端的字段）</span></span><br><span class="line">    <span class="keyword">protected</span> $hidden = [<span class="string">'password'</span>,<span class="string">'updated_at'</span>,<span class="string">'created_at'</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5、创建控制器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan make:controller MemberController</span><br></pre></td></tr></table></figure><p>app\Controller\MemberController.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Http</span>\<span class="title">Request</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Validator</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Models</span>\<span class="title">Member</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MemberController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">insert</span><span class="params">(Request $req)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 生成验证器对象</span></span><br><span class="line">        <span class="comment">// 参数一、表单中的数据</span></span><br><span class="line">        <span class="comment">// 参数二、验证规则</span></span><br><span class="line">        $validator = Validator::make($req-&gt;all(), [</span><br><span class="line">            <span class="string">'username'</span>=&gt;<span class="string">'required|min:6|max:18|unique:members'</span>,</span><br><span class="line">            <span class="string">'password'</span>=&gt;<span class="string">'required|min:6|max:18|confirmed'</span>,</span><br><span class="line">        ]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果失败</span></span><br><span class="line">        <span class="keyword">if</span>($validator-&gt;fails())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 获取错误信息</span></span><br><span class="line">            $errors = $validator-&gt;errors();</span><br><span class="line">            <span class="comment">// 返回 JSON 对象以及 422 的状态码</span></span><br><span class="line">            <span class="keyword">return</span> error($errors, <span class="number">422</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 插入数据库</span></span><br><span class="line">        <span class="comment">// 返回值：插入成功之后那条记录的对象</span></span><br><span class="line">        $member = Member::create([</span><br><span class="line">            <span class="string">'username'</span> =&gt; $req-&gt;username,</span><br><span class="line">            <span class="string">'password'</span> =&gt; bcrypt($req-&gt;password),</span><br><span class="line">        ]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ok($member);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6、在 postman 中测试接口</p><p><img src="http://c.hiphotos.baidu.com/image/%70%69%63/item/279759ee3d6d55fb182b3d6060224f4a21a4dd83.jpg" alt=""></p><p>保存返回的结果（失败、成功的结果都保存一份）：</p><p><img src="http://c.hiphotos.baidu.com/image/%70%69%63/item/d439b6003af33a873b824b5ccb5c10385243b58d.jpg" alt="">7、发布文档</p><p><img src="http://h.hiphotos.baidu.com/image/%70%69%63/item/ca1349540923dd54419bec2edc09b3de9d82488f.jpg" alt=""></p><h2 id="登录接口"><a href="#登录接口" class="headerlink" title="登录接口"></a>登录接口</h2><p>1、postman 中定义接口地址、参数等</p><p><img src="http://h.hiphotos.baidu.com/image/%70%69%63/item/71cf3bc79f3df8dce6d7c4d7c011728b46102889.jpg" alt=""></p><p>2、定义路由</p><p>routes/api.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Route::post(<span class="string">'authorizations'</span>, <span class="string">'MemberController@login'</span>);</span><br></pre></td></tr></table></figure><p>3、控制器中添加登录方法</p><p>app\Http\Controllers\MemberController.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span><span class="params">(Request $req)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $validator = Validator::make($req-&gt;all(), [</span><br><span class="line">        <span class="string">'username'</span>=&gt;<span class="string">'required|min:6|max:18'</span>,</span><br><span class="line">        <span class="string">'password'</span>=&gt;<span class="string">'required|min:6|max:18'</span>,</span><br><span class="line">    ]);</span><br><span class="line">    <span class="keyword">if</span>($validator-&gt;fails())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 获取错误信息</span></span><br><span class="line">        $errors = $validator-&gt;errors();</span><br><span class="line">        <span class="comment">// 返回 JSON 对象以及 422 的状态码</span></span><br><span class="line">        <span class="keyword">return</span> error($errors, <span class="number">422</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据用户名查询账号是否存在 （只查询一条用 first 方法）</span></span><br><span class="line">    $member = Member::select(<span class="string">'id'</span>,<span class="string">'password'</span>)-&gt;where(<span class="string">'username'</span>,$req-&gt;username)-&gt;first();</span><br><span class="line">    <span class="keyword">if</span>($member)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 判断密码</span></span><br><span class="line">        <span class="keyword">if</span>(Hash::check($req-&gt;password, $member-&gt;password))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 把用户的信息保存到令牌（JWT）中，然后把令牌发给前端</span></span><br><span class="line">            $now = time();</span><br><span class="line">            <span class="comment">// 读取密钥</span></span><br><span class="line">            $key = env(<span class="string">'JWT_KEY'</span>);</span><br><span class="line">            <span class="comment">// 过期时间</span></span><br><span class="line">            $expire = $now + env(<span class="string">'JWT_EXPIRE'</span>);</span><br><span class="line">            <span class="comment">// 定义令牌中的数据</span></span><br><span class="line">            $data = [</span><br><span class="line">                <span class="string">'iat'</span> =&gt; $now,        <span class="comment">// 当前时间</span></span><br><span class="line">                <span class="string">'exp'</span> =&gt; $expire,     <span class="comment">// 过期时间</span></span><br><span class="line">                <span class="string">'id'</span> =&gt; $member-&gt;id,</span><br><span class="line">            ];</span><br><span class="line">            <span class="comment">// 生成令牌</span></span><br><span class="line">            $jwt = JWT::encode($data, $key);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 发给前端</span></span><br><span class="line">            <span class="keyword">return</span> ok([</span><br><span class="line">                <span class="string">'ACCESS_TOKEN'</span> =&gt; $jwt,</span><br><span class="line">            ]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> error(<span class="string">'密码不正确！'</span>, <span class="number">400</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> error(<span class="string">'用户名不存在！'</span>, <span class="number">404</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、下载 JWT 的包</p><p>登录时需要 JWT 令牌机制，所以需要先安装一个解析 JWT 的包：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer require firebase/php-jwt</span><br></pre></td></tr></table></figure><p>5、配置 JWT</p><p>.env  文件中定义 jwt 的密钥和过期时间 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">JWT_KEN=fdsa32@#RFSDafpeq3r2fews8d783f;fa/fd293f</span><br><span class="line">JWT_EXPIRE=7200</span><br></pre></td></tr></table></figure><p>6、保存示例结果</p><p>在 Postman 中把几种不同情况的返回结果都保存起来：</p><p><img src="http://b.hiphotos.baidu.com/image/%70%69%63/item/7dd98d1001e93901d0c8c67876ec54e737d196aa.jpg" alt=""></p><p>登录成功时返回令牌：</p><p><img src="http://f.hiphotos.baidu.com/image/%70%69%63/item/d8f9d72a6059252d11895742399b033b5ab5b9de.jpg" alt=""></p><h1 id="令牌的验证"><a href="#令牌的验证" class="headerlink" title="令牌的验证"></a>令牌的验证</h1><p>前端在登录成功之后，会得到令牌，然后需要把得到的令牌保存到本地，之后在请求需要验证的接口时（比如下单）需要把这个令牌在 HTTP 协议头中发送到服务器端，以进行令牌验证。</p><h2 id="服务器端验证"><a href="#服务器端验证" class="headerlink" title="服务器端验证"></a>服务器端验证</h2><p>我们可以使用 Laravel 框架的中间件来实现令牌的验证。</p><p>1、创建中间件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan make:middleware Jwt</span><br></pre></td></tr></table></figure><p>并编写中间件代码:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Middleware</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Closure</span>;</span><br><span class="line"><span class="keyword">use</span> \<span class="title">Firebase</span>\<span class="title">JWT</span>\<span class="title">JWT</span> <span class="title">as</span> <span class="title">JWTCHECK</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Jwt</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Handle an incoming request.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  \Illuminate\Http\Request  $request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  \Closure  $next</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> mixed</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span><span class="params">($request, Closure $next)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 说明：客户端在提交令牌时，是把令牌放到 http 协议头中（不是表单中！！）</span></span><br><span class="line"><span class="comment">                并且 JWT 规定前7个字符必须是 bearer （后面这里有个空格）</span></span><br><span class="line"><span class="comment">            HTTP_AUTHORIZATION: bearer fdkl;ajsf;dsajlfjl;jxxxxx</span></span><br><span class="line"><span class="comment">            所以我们在获取令牌时，要从 $_SERVER 中获取，不是 $_POST</span></span><br><span class="line"><span class="comment">            在 Laravel 中要获取 $_SERVER 使用  $request-&gt;server 函数</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="comment">// 从协议头是取出令牌</span></span><br><span class="line">        $jwt = substr($request-&gt;server(<span class="string">'HTTP_AUTHORIZATION'</span>), <span class="number">7</span>);</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 解析 token</span></span><br><span class="line">            $jwt = JWTCHECK::decode($jwt, env(<span class="string">'JWT_KEY'</span>), <span class="keyword">array</span>(<span class="string">'HS256'</span>));</span><br><span class="line">            <span class="comment">// 把解析出来的数据保存到 Request 对象中的 jwt 属性上，将来在控制器中就可能 $req-&gt;jwt 这样来获取了</span></span><br><span class="line">            $request-&gt;jwt = $jwt;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 继续执行下一个中间件</span></span><br><span class="line">            <span class="keyword">return</span> $next($request);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(\<span class="keyword">Exception</span> $e)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 返回错误信息</span></span><br><span class="line">            <span class="keyword">return</span> response([</span><br><span class="line">                <span class="string">'code'</span>=&gt;<span class="string">'403'</span>,</span><br><span class="line">                <span class="string">'message'</span>=&gt;<span class="string">'HTTP/1.1 403 Forbidden'</span></span><br><span class="line">            ]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、注册中间件到路由中间件组中</p><p>app\Http\Kernel.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> $routeMiddleware = [</span><br><span class="line">    <span class="string">'auth'</span> =&gt; \App\Http\Middleware\Authenticate::class,</span><br><span class="line">    <span class="string">'auth.basic'</span> =&gt; \Illuminate\Auth\Middleware\AuthenticateWithBasicAuth::class,</span><br><span class="line">    <span class="string">'bindings'</span> =&gt; \Illuminate\Routing\Middleware\SubstituteBindings::class,</span><br><span class="line">    <span class="string">'cache.headers'</span> =&gt; \Illuminate\Http\Middleware\SetCacheHeaders::class,</span><br><span class="line">    <span class="string">'can'</span> =&gt; \Illuminate\Auth\Middleware\Authorize::class,</span><br><span class="line">    <span class="string">'guest'</span> =&gt; \App\Http\Middleware\RedirectIfAuthenticated::class,</span><br><span class="line">    <span class="string">'signed'</span> =&gt; \Illuminate\Routing\Middleware\ValidateSignature::class,</span><br><span class="line">    <span class="string">'throttle'</span> =&gt; \Illuminate\Routing\Middleware\ThrottleRequests::class,</span><br><span class="line">    <span class="string">'verified'</span> =&gt; \Illuminate\Auth\Middleware\EnsureEmailIsVerified::class,</span><br><span class="line">    <span class="string">'jwt'</span> =&gt; \App\Http\Middleware\Jwt::class,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>3、在定义路由时应用中间件</p><p>routes/api.php</p><p>先定义一个路由组，然后对组应用 jwt 中间件，所有这个组中的路由都会先验证令牌</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Route::middleware([<span class="string">'jwt'</span>])-&gt;group(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Route::post(<span class="string">'orders'</span>, <span class="string">'MemberController@order'</span>);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>4、控制器中获取令牌数据</p><p>因为在中间件中我们已经把解析令牌的数据保存到 Request 对象的 jwt 属性中了，所以在控制器中可以直接使用 <code>$req-&gt;jwt</code> 来获取令牌中的数据：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">order</span><span class="params">(Request $req)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 获取令牌中的数据</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> $req-&gt;jwt-&gt;id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Postman-中设置令牌"><a href="#Postman-中设置令牌" class="headerlink" title="Postman 中设置令牌"></a>Postman 中设置令牌</h2><p>当使用 Postman 来请求需要验证的接口时，需要先在 Postman 中设置令牌，否则 会请求失败。</p><p>1、先使用正确的账号和密码登录成功得到一个令牌</p><p><img src="http://d.hiphotos.baidu.com/image/%70%69%63/item/a6efce1b9d16fdfaac2b8ca8b98f8c5494ee7b34.jpg" alt=""></p><p>2、把令牌保存到环境变量中</p><p><img src="http://g.hiphotos.baidu.com/image/%70%69%63/item/9f2f070828381f3067f5c7efa4014c086f06f08c.jpg" alt=""></p><p>3、在需要令牌的接口上设置 authorzation</p><p><img src="http://d.hiphotos.baidu.com/image/%70%69%63/item/9358d109b3de9c82ca8cb3c96181800a18d8438e.jpg" alt=""></p><p>这时就可以正常的访问令牌了。</p>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务端 </tag>
            
            <tag> 接口开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>把可爱的看板娘捕捉到自己的hexo博客之血小板 (*^▽^*)</title>
      <link href="/2018/11/22/xuexiaoban/"/>
      <url>/2018/11/22/xuexiaoban/</url>
      
        <content type="html"><![CDATA[<p><img src="https://imgkr.cn-bj.ufileos.com/144a9932-7b39-4803-a30c-3d6acb4aac48.gif" alt="hYrLg.gif"></p><p>*<em>瞧见血小板就莫名的开心( ＾∀＾） *</em></p><p>自娱的博客肯定也要让她来守护着。。。</p><a id="more"></a><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>首先你要去我的<a href="https://github.com/JIAOBANTANG/live2d-xuexiaoban.git" target="_blank" rel="noopener">Github</a>下载LIve2D代码，当然血小板的模型也包含在内。</p><h3 id="正式开工"><a href="#正式开工" class="headerlink" title="正式开工"></a>正式开工</h3><p>接着解压复制live2d文件夹到你的hexo主题source目录下，拿我的material-x来说：如下图</p><p><img src="https://picgd.com/images/2018/11/22/hYGzE.png" alt=""></p><p>然后在你博客程序头部文件（header）引入界面样式，在 head 标签内插入如下代码，目录为：Hexo\themes\material-x\layout_partial\head.ejs(还是拿我的博客主题举例)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"/live2d/css/live2d.css"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>接着在 body 标签内合适的位置插入 Live2D 看板娘的元素，按照 Html 书写规范写 ~我放在了博客footer文件里,目录：Hexo\themes\material-x\layout_partial\footer.ejs</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 血小板 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"landlord"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"message"</span> <span class="attr">style</span>=<span class="string">"opacity:0"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"live2d"</span> <span class="attr">width</span>=<span class="string">"560"</span> <span class="attr">height</span>=<span class="string">"500"</span> <span class="attr">class</span>=<span class="string">"live2d"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"hide-button"</span>&gt;</span>隐藏<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>同样在你博客程序页脚文件（footer）引入脚本，目录：Hexo\themes\material-x\layout_partial\footer.ejs</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- live2d 血小板 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/jquery/2.2.4/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> message_Path = <span class="string">'/live2d/'</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> home_Path = <span class="string">'https://haremu.com/'</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/live2d/js/live2d.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/live2d/js/message.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    loadlive2d(<span class="string">"live2d"</span>, <span class="string">"/live2d/model/xiaoban/model.json"</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后输入以下指令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><h3 id="大功告成"><a href="#大功告成" class="headerlink" title="大功告成"></a>大功告成</h3><p>这时如果打开浏览器如果有血小板那就配置成功了，然后<code>hexo d</code>推到服务器上。打开你的博客就会出现可爱的血小板…</p><p><img src="https://picgd.com/images/2018/11/22/hYcBV.png" alt="hYcBV.png"></p><p>按着步骤来，怎么可能会出错!</p><p>鼠标放在页面某个元素上时，需要 Live2D 看板娘提示的请修改 message.json 文件。</p><p>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"mouseover"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"selector"</span>: <span class="string">".title a"</span>,</span><br><span class="line">            <span class="string">"text"</span>: [<span class="string">"要看看 &#123;text&#125; 么？"</span>]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"selector"</span>: <span class="string">".searchbox"</span>,</span><br><span class="line">            <span class="string">"text"</span>: [<span class="string">"在找什么东西呢，需要帮忙吗？"</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"click"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"selector"</span>: <span class="string">"#landlord #live2d"</span>,</span><br><span class="line">            <span class="string">"text"</span>: [<span class="string">"不要动手动脚的！快把手拿开~~"</span>, <span class="string">"真…真的是不知羞耻！"</span>,<span class="string">"Hentai！"</span>, <span class="string">"再摸的话我可要报警了！⌇●﹏●⌇"</span>, <span class="string">"110吗，这里有个变态一直在摸我(ó﹏ò｡)"</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其他的自己研究去，反正我的血小板也是郁郁寡欢的，和我一样…</p><h3 id="2019-2-21"><a href="#2019-2-21" class="headerlink" title="2019/2/21"></a>2019/2/21</h3><p><strong>解决模糊问题</strong><br>当页面为手机时，适配效果<br>在主题文件夹下找到_footer.less文件,添加以下样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">@<span class="keyword">media</span> (max-width: @on_phone) &#123;</span><br><span class="line">  <span class="selector-id">#footer</span>&#123;</span><br><span class="line">      <span class="attribute">background-color</span>:transparent;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-id">#landlord</span>&#123;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">170px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-id">#live2d</span>&#123;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">170px</span>;</span><br><span class="line">      <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.message</span>&#123;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">      <span class="attribute">left</span>: <span class="number">0px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-id">#footer</span> &#123;</span><br><span class="line">    <span class="attribute">padding-bottom</span>: <span class="number">180px</span> ;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 血小板 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> live2D </tag>
            
            <tag> 血小板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>养育环境场</title>
      <link href="/2018/11/18/firstArtiscle/"/>
      <url>/2018/11/18/firstArtiscle/</url>
      
        <content type="html"><![CDATA[<p><img src="https://img.zcool.cn/community/018c8f570da24c32f8751b3f039bae.jpg@1280w_1l_2o_100sh.jpg" alt=""></p><p><strong>“场”其实是包含大量行为线索的环境，这写行为线索会刺激你做出特定的行为。</strong><br>就像到了班里就像学习，到了球场自然就想打球，而到了餐厅自然想吃饭一样。</p><a id="more"></a><p><strong>生活的环境，就是”场”的环境。</strong></p><p>因为场的不同，在某一些地方你会努力工作，而在另一个地方你会懈怠；在一些地方你会沉默不语，而在另一些地方你会滔滔不绝</p><p>就比如我来说，平常下晚自习，我会纠结于要不要带电脑回去，带吧又想玩，不带吧又想学习，于是乎我总喜欢把今天总结的东西放在印象笔记里。我回到寝室的情况是这样的：</p><ul><li>回到寝室，坐在板凳上歇会，歇着歇着,就去刷知乎了；</li><li>该洗漱了，不情愿的离开手机去洗漱</li><li>等洗漱完了，今天知乎热榜还没刷呢，干脆待会刷完吧</li></ul><p>也许你已经猜到了，我会不停地刷。一看表，已经很晚，快要睡觉了。一种虚度了时光的空虚感悄然来袭，让我感到泪丧。笔记还没看呢。。。</p><p>我经常睡得很晚。有人说：晚睡是因为我们不肯面对失败的一天就这么结束了。我也是也是这样。</p><p>“我现在明明因为熬夜搞的很焦虑，为什么还要这样日复一日，不能改变呢？”</p><p>陈海贤曾把生活的乐趣分为两种：消费型快乐和创造型快乐。在消费型快乐里，你消费的是别人创造的产品，满足的是表面上的感官刺激；而在创造型快乐里，你在创造自己的产品。你在发挥自己的才能，辛苦地工作。在这个过程中，你会体会到一种深刻的成就感，一种自己正在变得更好的感觉。如果说消费型快乐是酒肉朋友，那么创造型快乐就是良师益友。</p><p>学习是一种创造型快乐，而看刷知乎，当然是一种消费型快乐了。所以我体会到的，正是消费型快乐过后所产生的空虚感。可是，明明我们知道创造型快乐更好，却为什么不能从事创造型快乐呢？原因是：创造型快乐是骑象人所热衷的、理智的快乐；而消费型快乐是大象所热衷的、感官的快乐。如果要从消费型快乐转到创造型快乐，我们就需要说服感性的大象。给自己创造一个学习或者工作氛围浓厚的“场”，就是一个好办法。但是不幸，也许是因为太懂享受了，我在寝室所创造的“场”，是放松和娱乐的。那里所有的行为线索，都在暗示我：应该好好休息了。所以，我无法驱动大象去主动学习，就完全可以理解了。</p><p>讲到这里，我想对“场“做一个更精确的总结：所谓“场”，就是我们心中的一个关于“空间功能”的假设。在这个假设里，图书馆、自习室或者写字间是和工作学习相联系的；而家、宿舍是和休息娱乐相联系的。你到了被假设为工作场所的空间，自然就表现出工作的样子；反之，如果你在家或宿舍，要让自己好好工作，就要付出几倍的心理努力，也未必能够实现。</p><p>现在你知道了什么是“场”，也知道了“场“怎么影响我们的行为。接下来，我们就来讨论一下该怎么在生活中应用各种“场”。养一个自己的“场”，要想用好”场”，我们先要弄清“场”的力量到底从哪里来。<br>“场”的第一个来源：别人在这个空间里的行为。人是一种社会性的动物，如果在一个空间里，别人都在埋头工作，它自然也会暗示你努力工作。很多人说，高中三年，是自己最努力的时光。那是因为每个人都在努力学习，让高光。那是因为每个人都在努力学习，让高中教室变成了一个很有力的场。他跟我们透露过，他这个课的内容，就是在他省图书馆的自习室里完成的。他家里有书房，为什么要每天到围书馆工作呢？就是因为这里学习的人多，”场”的力量比较强嘛。这个场景你当然懂，但不是那么好实现。如果每次都要到图书馆才能进入学习和创造的状态，那么对环境的要求也太高了。所以，我们要重点说说“场”的第二个力量来原了：你以的在这个空间里的行为。</p><p>陈海贤举个例子。陈海贤家里有一个书桌，在这个书桌上，他只做跟工作有关的事。如果写着写着，他想浏览网页或者看电影，他会要求自己换一个地方，比如到客厅的沙发上去。因为，如果他在这个书桌上娱乐，这个书桌作为工作的“场”就会被破坏掉。他还有另外一个工作场，就是他的电脑，事实上，他有两台电脑；一台普通电脑，一台工作电脑。工作电脑里，只有Office等一些用于工作的软件。当他打开工作电脑的时候，他心里的大象就已经做好了准备，他就知道要开始工作了。可是对大部分人来说，工作和娱乐的距离只有关闭Word和打开浏览器的距离，要抵制这样的诱感，就太难为大象了。所以，“场”这个东西并不玄虚。它就是你在一个空间里的做事习惯，习惯会形成稳定的心理预期，进而义会巩园习惯的行为。你在这个空间里做的事情越纯牌、越持久，这个空间“场”的力量就越大。</p><p>现在回到我身上<br>我也应该给自己一个建议；像他一样，我也要找个地方养一个小小的、专门进行学习与工作的“场”。如果能在这个“场“里贴些激励自己的话，作为“场”的边界和线索，那就更有帮助了。这样，在那里那个纯粹的休闲“场“里，学习就抢占了一块自己的地盘，它的存在会给我强烈的心理略示，帮助我行动起来。而随着对这个“场”的使用越来越频繁，它也会变得越来越强大。听到这里，也许你想问：”场”只对学习和工作有用吗？当然不是，其实“场“可以巧妙地应用在各种改变的场景中。比如：在家庭治疗里，他也经常建议一些琦远的夫麦能在固定的时间，找一个固定的地点，做一些深入的沟通和交流。如果你经常感到疲意，可以给自己做一个“恢复精力”的场，比如：每天到一个固定的地方独处静坐，让自己恢复能量。</p><p>讲到这里，让我们再来深入思考一下，“场”到底是什么？</p><p><strong>他其实是环境记忆中，我们每个人的历史。</strong></p><p>你的奋斗、你的挣扎、你的灵光一现、你的引以为豪，这些事在别人看来也许无足轻重，可是对你却意义重大。</p><p>如果你有意识地让它们只在某个特定的空间里发生，那这个空间就开始有了记忆，它就变成了能调动和激发大象的”场“，这里就成为了存储你美好的新经验的记忆银行。</p><blockquote><p>参考文献:陈海贤《自我发展心理学》</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Self </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自我发展 </tag>
            
            <tag> 改变 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>想给博主说点什么？</title>
      <link href="/2018/11/11/message/"/>
      <url>/2018/11/11/message/</url>
      
        <content type="html"><![CDATA[<h3 id="请在评论区写下想对我说的话"><a href="#请在评论区写下想对我说的话" class="headerlink" title="请在评论区写下想对我说的话"></a>请在评论区写下想对我说的话</h3>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
